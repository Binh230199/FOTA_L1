
OTAFIRMWARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08002000  08002000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e80  0800213c  0800213c  0000213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005fbc  08005fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006078  08006078  00010070  2**0
                  CONTENTS
  4 .ARM          00000008  08006078  08006078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006080  08006080  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006080  08006080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006084  08006084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006088  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000070  080060f8  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080060f8  000103ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a35  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001edb  00000000  00000000  00019ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0001b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0001c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015add  00000000  00000000  0001c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000988b  00000000  00000000  00032455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c48  00000000  00000000  0003bce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000be928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002428  00000000  00000000  000be97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800213c <__do_global_dtors_aux>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4c05      	ldr	r4, [pc, #20]	; (8002154 <__do_global_dtors_aux+0x18>)
 8002140:	7823      	ldrb	r3, [r4, #0]
 8002142:	b933      	cbnz	r3, 8002152 <__do_global_dtors_aux+0x16>
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__do_global_dtors_aux+0x1c>)
 8002146:	b113      	cbz	r3, 800214e <__do_global_dtors_aux+0x12>
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <__do_global_dtors_aux+0x20>)
 800214a:	f3af 8000 	nop.w
 800214e:	2301      	movs	r3, #1
 8002150:	7023      	strb	r3, [r4, #0]
 8002152:	bd10      	pop	{r4, pc}
 8002154:	20000070 	.word	0x20000070
 8002158:	00000000 	.word	0x00000000
 800215c:	08005fa4 	.word	0x08005fa4

08002160 <frame_dummy>:
 8002160:	b508      	push	{r3, lr}
 8002162:	4b03      	ldr	r3, [pc, #12]	; (8002170 <frame_dummy+0x10>)
 8002164:	b11b      	cbz	r3, 800216e <frame_dummy+0xe>
 8002166:	4903      	ldr	r1, [pc, #12]	; (8002174 <frame_dummy+0x14>)
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <frame_dummy+0x18>)
 800216a:	f3af 8000 	nop.w
 800216e:	bd08      	pop	{r3, pc}
 8002170:	00000000 	.word	0x00000000
 8002174:	20000074 	.word	0x20000074
 8002178:	08005fa4 	.word	0x08005fa4

0800217c <strlen>:
 800217c:	4603      	mov	r3, r0
 800217e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002182:	2a00      	cmp	r2, #0
 8002184:	d1fb      	bne.n	800217e <strlen+0x2>
 8002186:	1a18      	subs	r0, r3, r0
 8002188:	3801      	subs	r0, #1
 800218a:	4770      	bx	lr

0800218c <__aeabi_uldivmod>:
 800218c:	b953      	cbnz	r3, 80021a4 <__aeabi_uldivmod+0x18>
 800218e:	b94a      	cbnz	r2, 80021a4 <__aeabi_uldivmod+0x18>
 8002190:	2900      	cmp	r1, #0
 8002192:	bf08      	it	eq
 8002194:	2800      	cmpeq	r0, #0
 8002196:	bf1c      	itt	ne
 8002198:	f04f 31ff 	movne.w	r1, #4294967295
 800219c:	f04f 30ff 	movne.w	r0, #4294967295
 80021a0:	f000 b96e 	b.w	8002480 <__aeabi_idiv0>
 80021a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80021a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80021ac:	f000 f806 	bl	80021bc <__udivmoddi4>
 80021b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80021b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80021b8:	b004      	add	sp, #16
 80021ba:	4770      	bx	lr

080021bc <__udivmoddi4>:
 80021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	9e08      	ldr	r6, [sp, #32]
 80021c2:	460d      	mov	r5, r1
 80021c4:	4604      	mov	r4, r0
 80021c6:	468e      	mov	lr, r1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 8083 	bne.w	80022d4 <__udivmoddi4+0x118>
 80021ce:	428a      	cmp	r2, r1
 80021d0:	4617      	mov	r7, r2
 80021d2:	d947      	bls.n	8002264 <__udivmoddi4+0xa8>
 80021d4:	fab2 f382 	clz	r3, r2
 80021d8:	b14b      	cbz	r3, 80021ee <__udivmoddi4+0x32>
 80021da:	f1c3 0120 	rsb	r1, r3, #32
 80021de:	fa05 fe03 	lsl.w	lr, r5, r3
 80021e2:	fa20 f101 	lsr.w	r1, r0, r1
 80021e6:	409f      	lsls	r7, r3
 80021e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80021ec:	409c      	lsls	r4, r3
 80021ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80021f2:	fbbe fcf8 	udiv	ip, lr, r8
 80021f6:	fa1f f987 	uxth.w	r9, r7
 80021fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80021fe:	fb0c f009 	mul.w	r0, ip, r9
 8002202:	0c21      	lsrs	r1, r4, #16
 8002204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8002208:	4290      	cmp	r0, r2
 800220a:	d90a      	bls.n	8002222 <__udivmoddi4+0x66>
 800220c:	18ba      	adds	r2, r7, r2
 800220e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8002212:	f080 8118 	bcs.w	8002446 <__udivmoddi4+0x28a>
 8002216:	4290      	cmp	r0, r2
 8002218:	f240 8115 	bls.w	8002446 <__udivmoddi4+0x28a>
 800221c:	f1ac 0c02 	sub.w	ip, ip, #2
 8002220:	443a      	add	r2, r7
 8002222:	1a12      	subs	r2, r2, r0
 8002224:	fbb2 f0f8 	udiv	r0, r2, r8
 8002228:	fb08 2210 	mls	r2, r8, r0, r2
 800222c:	fb00 f109 	mul.w	r1, r0, r9
 8002230:	b2a4      	uxth	r4, r4
 8002232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002236:	42a1      	cmp	r1, r4
 8002238:	d909      	bls.n	800224e <__udivmoddi4+0x92>
 800223a:	193c      	adds	r4, r7, r4
 800223c:	f100 32ff 	add.w	r2, r0, #4294967295
 8002240:	f080 8103 	bcs.w	800244a <__udivmoddi4+0x28e>
 8002244:	42a1      	cmp	r1, r4
 8002246:	f240 8100 	bls.w	800244a <__udivmoddi4+0x28e>
 800224a:	3802      	subs	r0, #2
 800224c:	443c      	add	r4, r7
 800224e:	1a64      	subs	r4, r4, r1
 8002250:	2100      	movs	r1, #0
 8002252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002256:	b11e      	cbz	r6, 8002260 <__udivmoddi4+0xa4>
 8002258:	2200      	movs	r2, #0
 800225a:	40dc      	lsrs	r4, r3
 800225c:	e9c6 4200 	strd	r4, r2, [r6]
 8002260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002264:	b902      	cbnz	r2, 8002268 <__udivmoddi4+0xac>
 8002266:	deff      	udf	#255	; 0xff
 8002268:	fab2 f382 	clz	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d14f      	bne.n	8002310 <__udivmoddi4+0x154>
 8002270:	1a8d      	subs	r5, r1, r2
 8002272:	2101      	movs	r1, #1
 8002274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002278:	fa1f f882 	uxth.w	r8, r2
 800227c:	fbb5 fcfe 	udiv	ip, r5, lr
 8002280:	fb0e 551c 	mls	r5, lr, ip, r5
 8002284:	fb08 f00c 	mul.w	r0, r8, ip
 8002288:	0c22      	lsrs	r2, r4, #16
 800228a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800228e:	42a8      	cmp	r0, r5
 8002290:	d907      	bls.n	80022a2 <__udivmoddi4+0xe6>
 8002292:	197d      	adds	r5, r7, r5
 8002294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8002298:	d202      	bcs.n	80022a0 <__udivmoddi4+0xe4>
 800229a:	42a8      	cmp	r0, r5
 800229c:	f200 80e9 	bhi.w	8002472 <__udivmoddi4+0x2b6>
 80022a0:	4694      	mov	ip, r2
 80022a2:	1a2d      	subs	r5, r5, r0
 80022a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80022a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80022ac:	fb08 f800 	mul.w	r8, r8, r0
 80022b0:	b2a4      	uxth	r4, r4
 80022b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80022b6:	45a0      	cmp	r8, r4
 80022b8:	d907      	bls.n	80022ca <__udivmoddi4+0x10e>
 80022ba:	193c      	adds	r4, r7, r4
 80022bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80022c0:	d202      	bcs.n	80022c8 <__udivmoddi4+0x10c>
 80022c2:	45a0      	cmp	r8, r4
 80022c4:	f200 80d9 	bhi.w	800247a <__udivmoddi4+0x2be>
 80022c8:	4610      	mov	r0, r2
 80022ca:	eba4 0408 	sub.w	r4, r4, r8
 80022ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80022d2:	e7c0      	b.n	8002256 <__udivmoddi4+0x9a>
 80022d4:	428b      	cmp	r3, r1
 80022d6:	d908      	bls.n	80022ea <__udivmoddi4+0x12e>
 80022d8:	2e00      	cmp	r6, #0
 80022da:	f000 80b1 	beq.w	8002440 <__udivmoddi4+0x284>
 80022de:	2100      	movs	r1, #0
 80022e0:	e9c6 0500 	strd	r0, r5, [r6]
 80022e4:	4608      	mov	r0, r1
 80022e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ea:	fab3 f183 	clz	r1, r3
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d14b      	bne.n	800238a <__udivmoddi4+0x1ce>
 80022f2:	42ab      	cmp	r3, r5
 80022f4:	d302      	bcc.n	80022fc <__udivmoddi4+0x140>
 80022f6:	4282      	cmp	r2, r0
 80022f8:	f200 80b9 	bhi.w	800246e <__udivmoddi4+0x2b2>
 80022fc:	1a84      	subs	r4, r0, r2
 80022fe:	eb65 0303 	sbc.w	r3, r5, r3
 8002302:	2001      	movs	r0, #1
 8002304:	469e      	mov	lr, r3
 8002306:	2e00      	cmp	r6, #0
 8002308:	d0aa      	beq.n	8002260 <__udivmoddi4+0xa4>
 800230a:	e9c6 4e00 	strd	r4, lr, [r6]
 800230e:	e7a7      	b.n	8002260 <__udivmoddi4+0xa4>
 8002310:	409f      	lsls	r7, r3
 8002312:	f1c3 0220 	rsb	r2, r3, #32
 8002316:	40d1      	lsrs	r1, r2
 8002318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800231c:	fbb1 f0fe 	udiv	r0, r1, lr
 8002320:	fa1f f887 	uxth.w	r8, r7
 8002324:	fb0e 1110 	mls	r1, lr, r0, r1
 8002328:	fa24 f202 	lsr.w	r2, r4, r2
 800232c:	409d      	lsls	r5, r3
 800232e:	fb00 fc08 	mul.w	ip, r0, r8
 8002332:	432a      	orrs	r2, r5
 8002334:	0c15      	lsrs	r5, r2, #16
 8002336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800233a:	45ac      	cmp	ip, r5
 800233c:	fa04 f403 	lsl.w	r4, r4, r3
 8002340:	d909      	bls.n	8002356 <__udivmoddi4+0x19a>
 8002342:	197d      	adds	r5, r7, r5
 8002344:	f100 31ff 	add.w	r1, r0, #4294967295
 8002348:	f080 808f 	bcs.w	800246a <__udivmoddi4+0x2ae>
 800234c:	45ac      	cmp	ip, r5
 800234e:	f240 808c 	bls.w	800246a <__udivmoddi4+0x2ae>
 8002352:	3802      	subs	r0, #2
 8002354:	443d      	add	r5, r7
 8002356:	eba5 050c 	sub.w	r5, r5, ip
 800235a:	fbb5 f1fe 	udiv	r1, r5, lr
 800235e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8002362:	fb01 f908 	mul.w	r9, r1, r8
 8002366:	b295      	uxth	r5, r2
 8002368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800236c:	45a9      	cmp	r9, r5
 800236e:	d907      	bls.n	8002380 <__udivmoddi4+0x1c4>
 8002370:	197d      	adds	r5, r7, r5
 8002372:	f101 32ff 	add.w	r2, r1, #4294967295
 8002376:	d274      	bcs.n	8002462 <__udivmoddi4+0x2a6>
 8002378:	45a9      	cmp	r9, r5
 800237a:	d972      	bls.n	8002462 <__udivmoddi4+0x2a6>
 800237c:	3902      	subs	r1, #2
 800237e:	443d      	add	r5, r7
 8002380:	eba5 0509 	sub.w	r5, r5, r9
 8002384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8002388:	e778      	b.n	800227c <__udivmoddi4+0xc0>
 800238a:	f1c1 0720 	rsb	r7, r1, #32
 800238e:	408b      	lsls	r3, r1
 8002390:	fa22 fc07 	lsr.w	ip, r2, r7
 8002394:	ea4c 0c03 	orr.w	ip, ip, r3
 8002398:	fa25 f407 	lsr.w	r4, r5, r7
 800239c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80023a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80023a4:	fa1f f88c 	uxth.w	r8, ip
 80023a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80023ac:	fa20 f307 	lsr.w	r3, r0, r7
 80023b0:	fb09 fa08 	mul.w	sl, r9, r8
 80023b4:	408d      	lsls	r5, r1
 80023b6:	431d      	orrs	r5, r3
 80023b8:	0c2b      	lsrs	r3, r5, #16
 80023ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80023be:	45a2      	cmp	sl, r4
 80023c0:	fa02 f201 	lsl.w	r2, r2, r1
 80023c4:	fa00 f301 	lsl.w	r3, r0, r1
 80023c8:	d909      	bls.n	80023de <__udivmoddi4+0x222>
 80023ca:	eb1c 0404 	adds.w	r4, ip, r4
 80023ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80023d2:	d248      	bcs.n	8002466 <__udivmoddi4+0x2aa>
 80023d4:	45a2      	cmp	sl, r4
 80023d6:	d946      	bls.n	8002466 <__udivmoddi4+0x2aa>
 80023d8:	f1a9 0902 	sub.w	r9, r9, #2
 80023dc:	4464      	add	r4, ip
 80023de:	eba4 040a 	sub.w	r4, r4, sl
 80023e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80023e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80023ea:	fb00 fa08 	mul.w	sl, r0, r8
 80023ee:	b2ad      	uxth	r5, r5
 80023f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80023f4:	45a2      	cmp	sl, r4
 80023f6:	d908      	bls.n	800240a <__udivmoddi4+0x24e>
 80023f8:	eb1c 0404 	adds.w	r4, ip, r4
 80023fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8002400:	d22d      	bcs.n	800245e <__udivmoddi4+0x2a2>
 8002402:	45a2      	cmp	sl, r4
 8002404:	d92b      	bls.n	800245e <__udivmoddi4+0x2a2>
 8002406:	3802      	subs	r0, #2
 8002408:	4464      	add	r4, ip
 800240a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800240e:	fba0 8902 	umull	r8, r9, r0, r2
 8002412:	eba4 040a 	sub.w	r4, r4, sl
 8002416:	454c      	cmp	r4, r9
 8002418:	46c6      	mov	lr, r8
 800241a:	464d      	mov	r5, r9
 800241c:	d319      	bcc.n	8002452 <__udivmoddi4+0x296>
 800241e:	d016      	beq.n	800244e <__udivmoddi4+0x292>
 8002420:	b15e      	cbz	r6, 800243a <__udivmoddi4+0x27e>
 8002422:	ebb3 020e 	subs.w	r2, r3, lr
 8002426:	eb64 0405 	sbc.w	r4, r4, r5
 800242a:	fa04 f707 	lsl.w	r7, r4, r7
 800242e:	fa22 f301 	lsr.w	r3, r2, r1
 8002432:	431f      	orrs	r7, r3
 8002434:	40cc      	lsrs	r4, r1
 8002436:	e9c6 7400 	strd	r7, r4, [r6]
 800243a:	2100      	movs	r1, #0
 800243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002440:	4631      	mov	r1, r6
 8002442:	4630      	mov	r0, r6
 8002444:	e70c      	b.n	8002260 <__udivmoddi4+0xa4>
 8002446:	468c      	mov	ip, r1
 8002448:	e6eb      	b.n	8002222 <__udivmoddi4+0x66>
 800244a:	4610      	mov	r0, r2
 800244c:	e6ff      	b.n	800224e <__udivmoddi4+0x92>
 800244e:	4543      	cmp	r3, r8
 8002450:	d2e6      	bcs.n	8002420 <__udivmoddi4+0x264>
 8002452:	ebb8 0e02 	subs.w	lr, r8, r2
 8002456:	eb69 050c 	sbc.w	r5, r9, ip
 800245a:	3801      	subs	r0, #1
 800245c:	e7e0      	b.n	8002420 <__udivmoddi4+0x264>
 800245e:	4628      	mov	r0, r5
 8002460:	e7d3      	b.n	800240a <__udivmoddi4+0x24e>
 8002462:	4611      	mov	r1, r2
 8002464:	e78c      	b.n	8002380 <__udivmoddi4+0x1c4>
 8002466:	4681      	mov	r9, r0
 8002468:	e7b9      	b.n	80023de <__udivmoddi4+0x222>
 800246a:	4608      	mov	r0, r1
 800246c:	e773      	b.n	8002356 <__udivmoddi4+0x19a>
 800246e:	4608      	mov	r0, r1
 8002470:	e749      	b.n	8002306 <__udivmoddi4+0x14a>
 8002472:	f1ac 0c02 	sub.w	ip, ip, #2
 8002476:	443d      	add	r5, r7
 8002478:	e713      	b.n	80022a2 <__udivmoddi4+0xe6>
 800247a:	3802      	subs	r0, #2
 800247c:	443c      	add	r4, r7
 800247e:	e724      	b.n	80022ca <__udivmoddi4+0x10e>

08002480 <__aeabi_idiv0>:
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002488:	f3bf 8f4f 	dsb	sy
}
 800248c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <__NVIC_SystemReset+0x24>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <__NVIC_SystemReset+0x24>)
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_SystemReset+0x28>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800249e:	f3bf 8f4f 	dsb	sy
}
 80024a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <__NVIC_SystemReset+0x20>
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	05fa0004 	.word	0x05fa0004

080024b0 <_send_AT_cmd>:
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
static eSTATUS _send_AT_cmd(char *AT_command, char *response, uint32_t timeout,
		eAT is_wait)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	70fb      	strb	r3, [r7, #3]
	eSTATUS answer = RET_WAIT;
 80024be:	2303      	movs	r3, #3
 80024c0:	75fb      	strb	r3, [r7, #23]
	memset(rx_buffer, '\0', RX_LEN);
 80024c2:	f44f 7211 	mov.w	r2, #580	; 0x244
 80024c6:	2100      	movs	r1, #0
 80024c8:	4824      	ldr	r0, [pc, #144]	; (800255c <_send_AT_cmd+0xac>)
 80024ca:	f003 f913 	bl	80056f4 <memset>

	HAL_UART_Transmit(&SIM_UART, (uint8_t*) AT_command, strlen(AT_command),
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fe54 	bl	800217c <strlen>
 80024d4:	4603      	mov	r3, r0
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	68f9      	ldr	r1, [r7, #12]
 80024de:	4820      	ldr	r0, [pc, #128]	; (8002560 <_send_AT_cmd+0xb0>)
 80024e0:	f002 f9b5 	bl	800484e <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	HAL_UART_Transmit(&SIM_UART, (uint8_t*) "\r\n", strlen("\r\n"),
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
 80024e8:	2202      	movs	r2, #2
 80024ea:	491e      	ldr	r1, [pc, #120]	; (8002564 <_send_AT_cmd+0xb4>)
 80024ec:	481c      	ldr	r0, [pc, #112]	; (8002560 <_send_AT_cmd+0xb0>)
 80024ee:	f002 f9ae 	bl	800484e <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	if (is_wait == AT_WAIT)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d102      	bne.n	80024fe <_send_AT_cmd+0x4e>
	{
		HAL_Delay(10);    //xxx: 650 -> 10 cho ứng dụng OTA
 80024f8:	200a      	movs	r0, #10
 80024fa:	f000 fe2f 	bl	800315c <HAL_Delay>
	}
	uint32_t tick_start = HAL_GetTick();
 80024fe:	f000 fe23 	bl	8003148 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

	while (answer != RET_OK)
 8002504:	e022      	b.n	800254c <_send_AT_cmd+0x9c>
	{
		if (HAL_GetTick() - tick_start >= timeout)
 8002506:	f000 fe1f 	bl	8003148 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d801      	bhi.n	800251a <_send_AT_cmd+0x6a>
		{
			return RET_TIMEOUT;
 8002516:	2302      	movs	r3, #2
 8002518:	e01c      	b.n	8002554 <_send_AT_cmd+0xa4>
		}
		if (rx_flag == true)
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <_send_AT_cmd+0xb8>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d014      	beq.n	800254c <_send_AT_cmd+0x9c>
		{
			rx_flag = false;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <_send_AT_cmd+0xb8>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
			if (strstr((char*) rx_buffer, response) != NULL)
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	480c      	ldr	r0, [pc, #48]	; (800255c <_send_AT_cmd+0xac>)
 800252c:	f003 f90a 	bl	8005744 <strstr>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_send_AT_cmd+0x8a>
			{
				return RET_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e00c      	b.n	8002554 <_send_AT_cmd+0xa4>
			}
			else if (strstr((char*) rx_buffer, "ERROR") != NULL)
 800253a:	490c      	ldr	r1, [pc, #48]	; (800256c <_send_AT_cmd+0xbc>)
 800253c:	4807      	ldr	r0, [pc, #28]	; (800255c <_send_AT_cmd+0xac>)
 800253e:	f003 f901 	bl	8005744 <strstr>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <_send_AT_cmd+0x9c>
			{
				return RET_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e003      	b.n	8002554 <_send_AT_cmd+0xa4>
	while (answer != RET_OK)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1d9      	bne.n	8002506 <_send_AT_cmd+0x56>
			}
		}
	}
	return answer;
 8002552:	7dfb      	ldrb	r3, [r7, #23]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200000f8 	.word	0x200000f8
 8002560:	20000394 	.word	0x20000394
 8002564:	08005fbc 	.word	0x08005fbc
 8002568:	200000f6 	.word	0x200000f6
 800256c:	08005fc0 	.word	0x08005fc0

08002570 <HAL_UARTEx_RxEventCallback>:
void sim7x00_rx_comming();
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_UARTEx_RxEventCallback+0x24>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_UARTEx_RxEventCallback+0x1a>
	{
		sim7x00_rx_comming();
 8002586:	f000 fbd5 	bl	8002d34 <sim7x00_rx_comming>
	}
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400

08002598 <ota_enable_send_AT>:
void ota_enable_send_AT()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	DTR_GPIO_Port->BSRR = (uint32_t) DTR_Pin << 16;    //HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_SET);
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <ota_enable_send_AT+0x18>)
 800259e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80025a2:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 80025a4:	2064      	movs	r0, #100	; 0x64
 80025a6:	f000 fdd9 	bl	800315c <HAL_Delay>
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020400 	.word	0x40020400

080025b4 <ota_disable_send_AT>:
void ota_disable_send_AT()
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&SIM_UART, (uint8_t*) "AT+CSCLK=1\r\n",
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	220c      	movs	r2, #12
 80025be:	4906      	ldr	r1, [pc, #24]	; (80025d8 <ota_disable_send_AT+0x24>)
 80025c0:	4806      	ldr	r0, [pc, #24]	; (80025dc <ota_disable_send_AT+0x28>)
 80025c2:	f002 f944 	bl	800484e <HAL_UART_Transmit>
			strlen("AT+CSCLK=1\r\n"), HAL_MAX_DELAY);
	HAL_Delay(100);
 80025c6:	2064      	movs	r0, #100	; 0x64
 80025c8:	f000 fdc8 	bl	800315c <HAL_Delay>
	DTR_GPIO_Port->BSRR = (uint32_t) DTR_Pin;    // << 16;    //HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <ota_disable_send_AT+0x2c>)
 80025ce:	2204      	movs	r2, #4
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	08005fc8 	.word	0x08005fc8
 80025dc:	20000394 	.word	0x20000394
 80025e0:	40020400 	.word	0x40020400

080025e4 <ota_write_firmware>:

bool ota_write_firmware()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0b8      	sub	sp, #224	; 0xe0
 80025e8:	af02      	add	r7, sp, #8
	/* Kiểm tra kích thước firmware có nằm trong khoảng giới hạn của vùng nhớ? */
	if ((firmware.size_of_firmware > 0)
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <ota_write_firmware+0x19c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80a8 	beq.w	8002744 <ota_write_firmware+0x160>
			&& (firmware.size_of_firmware < FOTA_SIZE_OF_APPLICATION(112)))
 80025f4:	4b62      	ldr	r3, [pc, #392]	; (8002780 <ota_write_firmware+0x19c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 3fe0 	cmp.w	r3, #114688	; 0x1c000
 80025fc:	f080 80a2 	bcs.w	8002744 <ota_write_firmware+0x160>
	{
		/* Mở khoá FLASH để thao tác với FLASH */
		HAL_FLASH_Unlock();
 8002600:	f001 f95a 	bl	80038b8 <HAL_FLASH_Unlock>
		/* Xoá vùng nhớ FLASH */
		for (int page = 0; page < 448; page++)    //TODO: de y truong hop, khi + 1 thi lo firmware gan 110k thi no co xoa sang vung tiep theo khong???
 8002604:	2300      	movs	r3, #0
 8002606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800260a:	e00d      	b.n	8002628 <ota_write_firmware+0x44>
		{
			flash_erase(
					(uint32_t) firmware.new_address + page * FOTA_SIZE_OF_PAGE);
 800260c:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <ota_write_firmware+0x19c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002614:	0212      	lsls	r2, r2, #8
			flash_erase(
 8002616:	4413      	add	r3, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f002 ff6f 	bl	80054fc <flash_erase>
		for (int page = 0; page < 448; page++)    //TODO: de y truong hop, khi + 1 thi lo firmware gan 110k thi no co xoa sang vung tiep theo khong???
 800261e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002622:	3301      	adds	r3, #1
 8002624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800262c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002630:	dbec      	blt.n	800260c <ota_write_firmware+0x28>
		}
		/* Chọn ổ nhớ F để đọc dữ liệu ra */
		_send_AT_cmd("AT+FSCD=F:", "OK", 3000, AT_NO_WAIT);
 8002632:	2302      	movs	r3, #2
 8002634:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002638:	4952      	ldr	r1, [pc, #328]	; (8002784 <ota_write_firmware+0x1a0>)
 800263a:	4853      	ldr	r0, [pc, #332]	; (8002788 <ota_write_firmware+0x1a4>)
 800263c:	f7ff ff38 	bl	80024b0 <_send_AT_cmd>

		uint32_t rest_size_of_firmware = firmware.size_of_firmware;
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <ota_write_firmware+0x19c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		uint32_t byte_to_write = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		uint16_t page_index = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		char buffer[100] = { 0 };
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	2260      	movs	r2, #96	; 0x60
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f003 f848 	bl	80056f4 <memset>
		uint16_t byte = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		while (rest_size_of_firmware > 0)
 800266a:	e056      	b.n	800271a <ota_write_firmware+0x136>
		{
			memset(buffer, '\0', 100);
 800266c:	463b      	mov	r3, r7
 800266e:	2264      	movs	r2, #100	; 0x64
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f83e 	bl	80056f4 <memset>
			if (rest_size_of_firmware >= 512)    //512
 8002678:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800267c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002680:	d31a      	bcc.n	80026b8 <ota_write_firmware+0xd4>
			{
				sprintf(buffer, "AT+CFTRANTX=\"F:/%s\",%ld,%ld",
 8002682:	4638      	mov	r0, r7
 8002684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800268e:	4a3f      	ldr	r2, [pc, #252]	; (800278c <ota_write_firmware+0x1a8>)
 8002690:	493f      	ldr	r1, [pc, #252]	; (8002790 <ota_write_firmware+0x1ac>)
 8002692:	f003 f837 	bl	8005704 <siprintf>
						firmware.name_firmware, byte_to_write, (uint32_t) 512);
				byte = 512;
 8002696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800269a:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
				byte_to_write += 512;
 800269e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80026a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				rest_size_of_firmware -= 512;
 80026aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ae:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80026b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026b6:	e017      	b.n	80026e8 <ota_write_firmware+0x104>
			}
			else
			{
				sprintf(buffer, "AT+CFTRANTX=\"F:/%s\",%ld,%ld",
 80026b8:	4638      	mov	r0, r7
 80026ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026c4:	4a31      	ldr	r2, [pc, #196]	; (800278c <ota_write_firmware+0x1a8>)
 80026c6:	4932      	ldr	r1, [pc, #200]	; (8002790 <ota_write_firmware+0x1ac>)
 80026c8:	f003 f81c 	bl	8005704 <siprintf>
						firmware.name_firmware, byte_to_write,
						(uint32_t) rest_size_of_firmware);
				byte = rest_size_of_firmware;
 80026cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026d0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
				byte_to_write += rest_size_of_firmware;
 80026d4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80026d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026dc:	4413      	add	r3, r2
 80026de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
				rest_size_of_firmware -= rest_size_of_firmware;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			}
			if (RET_OK == _send_AT_cmd(buffer, "+CFTRANTX:", 3000, AT_WAIT))
 80026e8:	4638      	mov	r0, r7
 80026ea:	2303      	movs	r3, #3
 80026ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026f0:	4928      	ldr	r1, [pc, #160]	; (8002794 <ota_write_firmware+0x1b0>)
 80026f2:	f7ff fedd 	bl	80024b0 <_send_AT_cmd>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10e      	bne.n	800271a <ota_write_firmware+0x136>
			{
				/* 2. WRITE */
				flash_write_array(
						(uint32_t) firmware.new_address
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <ota_write_firmware+0x19c>)
 80026fe:	689a      	ldr	r2, [r3, #8]
								+ (page_index++ * (FOTA_SIZE_OF_PAGE * 2)),
 8002700:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8002704:	1c59      	adds	r1, r3, #1
 8002706:	f8a7 10ca 	strh.w	r1, [r7, #202]	; 0xca
 800270a:	025b      	lsls	r3, r3, #9
				flash_write_array(
 800270c:	4413      	add	r3, r2
 800270e:	4922      	ldr	r1, [pc, #136]	; (8002798 <ota_write_firmware+0x1b4>)
 8002710:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8002714:	4618      	mov	r0, r3
 8002716:	f002 ff47 	bl	80055a8 <flash_write_array>
		while (rest_size_of_firmware > 0)
 800271a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1a4      	bne.n	800266c <ota_write_firmware+0x88>
						(char*) rx_buffer + 23, byte);
			}
		}
		/* Khoá bộ nhớ FLASH */
		HAL_FLASH_Lock();
 8002722:	f001 f903 	bl	800392c <HAL_FLASH_Lock>
		sprintf(buffer, "AT+FSDEL=\"/%s\"", firmware.name_firmware);
 8002726:	463b      	mov	r3, r7
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <ota_write_firmware+0x1a8>)
 800272a:	491c      	ldr	r1, [pc, #112]	; (800279c <ota_write_firmware+0x1b8>)
 800272c:	4618      	mov	r0, r3
 800272e:	f002 ffe9 	bl	8005704 <siprintf>
		_send_AT_cmd(buffer, "OK", 3000, AT_NO_WAIT);
 8002732:	4638      	mov	r0, r7
 8002734:	2302      	movs	r3, #2
 8002736:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800273a:	4912      	ldr	r1, [pc, #72]	; (8002784 <ota_write_firmware+0x1a0>)
 800273c:	f7ff feb8 	bl	80024b0 <_send_AT_cmd>
		return true;
 8002740:	2301      	movs	r3, #1
 8002742:	e018      	b.n	8002776 <ota_write_firmware+0x192>
	}
	char buffer[100] = { 0 };
 8002744:	2300      	movs	r3, #0
 8002746:	667b      	str	r3, [r7, #100]	; 0x64
 8002748:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800274c:	2260      	movs	r2, #96	; 0x60
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f002 ffcf 	bl	80056f4 <memset>
	sprintf(buffer, "AT+FSDEL=\"/%s\"", firmware.name_firmware);
 8002756:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <ota_write_firmware+0x1a8>)
 800275c:	490f      	ldr	r1, [pc, #60]	; (800279c <ota_write_firmware+0x1b8>)
 800275e:	4618      	mov	r0, r3
 8002760:	f002 ffd0 	bl	8005704 <siprintf>
	_send_AT_cmd(buffer, "OK", 3000, AT_NO_WAIT);
 8002764:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002768:	2302      	movs	r3, #2
 800276a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800276e:	4905      	ldr	r1, [pc, #20]	; (8002784 <ota_write_firmware+0x1a0>)
 8002770:	f7ff fe9e 	bl	80024b0 <_send_AT_cmd>
	return false;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	37d8      	adds	r7, #216	; 0xd8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000008c 	.word	0x2000008c
 8002784:	08005fd8 	.word	0x08005fd8
 8002788:	08005fdc 	.word	0x08005fdc
 800278c:	20000098 	.word	0x20000098
 8002790:	08005fe8 	.word	0x08005fe8
 8002794:	08006004 	.word	0x08006004
 8002798:	2000010f 	.word	0x2000010f
 800279c:	08006010 	.word	0x08006010

080027a0 <ota_check_CRC>:

bool ota_check_CRC(uint32_t address)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) address,
 80027a8:	6879      	ldr	r1, [r7, #4]
			firmware.size_of_firmware / 4);
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <ota_check_CRC+0x30>)
 80027ac:	681b      	ldr	r3, [r3, #0]
	uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*) address,
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4808      	ldr	r0, [pc, #32]	; (80027d4 <ota_check_CRC+0x34>)
 80027b4:	f000 fe1d 	bl	80033f2 <HAL_CRC_Calculate>
 80027b8:	60f8      	str	r0, [r7, #12]
	if (crc == 0)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <ota_check_CRC+0x24>
	{
		return true;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <ota_check_CRC+0x26>
	}
	else
	{
		return false;
 80027c4:	2300      	movs	r3, #0
	}
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000008c 	.word	0x2000008c
 80027d4:	2000038c 	.word	0x2000038c

080027d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027dc:	f000 fc4f 	bl	800307e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027e0:	f000 f9c0 	bl	8002b64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027e4:	f000 fa68 	bl	8002cb8 <MX_GPIO_Init>
	MX_DMA_Init();
 80027e8:	f000 fa48 	bl	8002c7c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80027ec:	f000 fa1c 	bl	8002c28 <MX_USART2_UART_Init>
	MX_CRC_Init();
 80027f0:	f000 fa06 	bl	8002c00 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
	ota_enable_send_AT();
 80027f4:	f7ff fed0 	bl	8002598 <ota_enable_send_AT>

	HAL_UARTEx_ReceiveToIdle_DMA(&SIM_UART, rx_buffer, RX_LEN);
 80027f8:	f44f 7211 	mov.w	r2, #580	; 0x244
 80027fc:	499b      	ldr	r1, [pc, #620]	; (8002a6c <main+0x294>)
 80027fe:	489c      	ldr	r0, [pc, #624]	; (8002a70 <main+0x298>)
 8002800:	f002 f8b7 	bl	8004972 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002804:	4b9b      	ldr	r3, [pc, #620]	; (8002a74 <main+0x29c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b9a      	ldr	r3, [pc, #616]	; (8002a74 <main+0x29c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]

	flag_need_update_fw = flash_read_int(FOTA_FLAG_NEED_UPDATE);
 8002814:	4898      	ldr	r0, [pc, #608]	; (8002a78 <main+0x2a0>)
 8002816:	f002 ff0d 	bl	8005634 <flash_read_int>
 800281a:	4603      	mov	r3, r0
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b97      	ldr	r3, [pc, #604]	; (8002a7c <main+0x2a4>)
 8002820:	701a      	strb	r2, [r3, #0]
	if (flag_need_update_fw == 1)
 8002822:	4b96      	ldr	r3, [pc, #600]	; (8002a7c <main+0x2a4>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d159      	bne.n	80028de <main+0x106>
	{
		firmware.current_address = flash_read_int(FOTA_CURRENT_ADDRESS);
 800282a:	4895      	ldr	r0, [pc, #596]	; (8002a80 <main+0x2a8>)
 800282c:	f002 ff02 	bl	8005634 <flash_read_int>
 8002830:	4603      	mov	r3, r0
 8002832:	4a94      	ldr	r2, [pc, #592]	; (8002a84 <main+0x2ac>)
 8002834:	6053      	str	r3, [r2, #4]
		g_current_ver.major = flash_read_int(
 8002836:	4894      	ldr	r0, [pc, #592]	; (8002a88 <main+0x2b0>)
 8002838:	f002 fefc 	bl	8005634 <flash_read_int>
 800283c:	4603      	mov	r3, r0
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b92      	ldr	r3, [pc, #584]	; (8002a8c <main+0x2b4>)
 8002842:	801a      	strh	r2, [r3, #0]
		FOTA_CURRENT_VER_MAJOR_ADDRESS);
		g_current_ver.minor = flash_read_int(
 8002844:	4892      	ldr	r0, [pc, #584]	; (8002a90 <main+0x2b8>)
 8002846:	f002 fef5 	bl	8005634 <flash_read_int>
 800284a:	4603      	mov	r3, r0
 800284c:	b29a      	uxth	r2, r3
 800284e:	4b8f      	ldr	r3, [pc, #572]	; (8002a8c <main+0x2b4>)
 8002850:	805a      	strh	r2, [r3, #2]
		FOTA_CURRENT_VER_MINOR_ADDRESS);
		g_current_ver.patch = flash_read_int(
 8002852:	4890      	ldr	r0, [pc, #576]	; (8002a94 <main+0x2bc>)
 8002854:	f002 feee 	bl	8005634 <flash_read_int>
 8002858:	4603      	mov	r3, r0
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <main+0x2b4>)
 800285e:	809a      	strh	r2, [r3, #4]
		FOTA_CURRENT_VER_PATCH_ADDRESS);
		firmware.size_of_firmware = flash_read_int(FOTA_FIRMWARE_SIZE);
 8002860:	488d      	ldr	r0, [pc, #564]	; (8002a98 <main+0x2c0>)
 8002862:	f002 fee7 	bl	8005634 <flash_read_int>
 8002866:	4603      	mov	r3, r0
 8002868:	4a86      	ldr	r2, [pc, #536]	; (8002a84 <main+0x2ac>)
 800286a:	6013      	str	r3, [r2, #0]
		flash_read_array(FOTA_FILENAME, firmware.name_firmware, 60);
 800286c:	223c      	movs	r2, #60	; 0x3c
 800286e:	498b      	ldr	r1, [pc, #556]	; (8002a9c <main+0x2c4>)
 8002870:	488b      	ldr	r0, [pc, #556]	; (8002aa0 <main+0x2c8>)
 8002872:	f002 feec 	bl	800564e <flash_read_array>
		flash_read_array(FOTA_PHONE_REQUEST, phone_number_request, 12);
 8002876:	220c      	movs	r2, #12
 8002878:	498a      	ldr	r1, [pc, #552]	; (8002aa4 <main+0x2cc>)
 800287a:	488b      	ldr	r0, [pc, #556]	; (8002aa8 <main+0x2d0>)
 800287c:	f002 fee7 	bl	800564e <flash_read_array>

		if (firmware.current_address == FOTA_APP1_START_ADDRESS)
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <main+0x2ac>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a89      	ldr	r2, [pc, #548]	; (8002aac <main+0x2d4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d103      	bne.n	8002892 <main+0xba>
		{
			firmware.new_address = FOTA_APP2_START_ADDRESS;
 800288a:	4b7e      	ldr	r3, [pc, #504]	; (8002a84 <main+0x2ac>)
 800288c:	4a88      	ldr	r2, [pc, #544]	; (8002ab0 <main+0x2d8>)
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	e007      	b.n	80028a2 <main+0xca>
		}
		else if (firmware.current_address == FOTA_APP2_START_ADDRESS)
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <main+0x2ac>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a86      	ldr	r2, [pc, #536]	; (8002ab0 <main+0x2d8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d102      	bne.n	80028a2 <main+0xca>
		{
			firmware.new_address = FOTA_APP1_START_ADDRESS;
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <main+0x2ac>)
 800289e:	4a83      	ldr	r2, [pc, #524]	; (8002aac <main+0x2d4>)
 80028a0:	609a      	str	r2, [r3, #8]
		}
		if (ota_write_firmware() == true) /* Write OK */
 80028a2:	f7ff fe9f 	bl	80025e4 <ota_write_firmware>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <main+0xfc>
		{
			HAL_Delay(2000);
 80028ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80028b0:	f000 fc54 	bl	800315c <HAL_Delay>
			/* Calculate CRC-32 */
			if (ota_check_CRC(firmware.new_address))
 80028b4:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <main+0x2ac>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff71 	bl	80027a0 <ota_check_CRC>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <main+0xf4>
			{
				fota_state = FOTA_SUCCESS;
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <main+0x2dc>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e006      	b.n	80028da <main+0x102>
			}
			else
			{
				fota_state = FOTA_CRC_ERROR;
 80028cc:	4b79      	ldr	r3, [pc, #484]	; (8002ab4 <main+0x2dc>)
 80028ce:	2206      	movs	r2, #6
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e002      	b.n	80028da <main+0x102>
			}
		}
		else /* Write fail */
		{
			fota_state = FOTA_WRITE_ERROR;
 80028d4:	4b77      	ldr	r3, [pc, #476]	; (8002ab4 <main+0x2dc>)
 80028d6:	2205      	movs	r2, #5
 80028d8:	701a      	strb	r2, [r3, #0]
		}
		ota_disable_send_AT();
 80028da:	f7ff fe6b 	bl	80025b4 <ota_disable_send_AT>
	}

	switch (fota_state)
 80028de:	4b75      	ldr	r3, [pc, #468]	; (8002ab4 <main+0x2dc>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	f200 8124 	bhi.w	8002b30 <main+0x358>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <main+0x118>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002b31 	.word	0x08002b31
 80028f4:	0800290d 	.word	0x0800290d
 80028f8:	08002b31 	.word	0x08002b31
 80028fc:	08002b31 	.word	0x08002b31
 8002900:	080029a3 	.word	0x080029a3
 8002904:	08002a07 	.word	0x08002a07
 8002908:	08002acd 	.word	0x08002acd
	{
		case FOTA_NO_UPDATE:
			break;
		case FOTA_SUCCESS:
			g_new_ver.major = flash_read_int(
 800290c:	486a      	ldr	r0, [pc, #424]	; (8002ab8 <main+0x2e0>)
 800290e:	f002 fe91 	bl	8005634 <flash_read_int>
 8002912:	4603      	mov	r3, r0
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b69      	ldr	r3, [pc, #420]	; (8002abc <main+0x2e4>)
 8002918:	801a      	strh	r2, [r3, #0]
			FOTA_NEW_VER_MAJOR_ADDRESS);
			g_new_ver.minor = flash_read_int(
 800291a:	4869      	ldr	r0, [pc, #420]	; (8002ac0 <main+0x2e8>)
 800291c:	f002 fe8a 	bl	8005634 <flash_read_int>
 8002920:	4603      	mov	r3, r0
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b65      	ldr	r3, [pc, #404]	; (8002abc <main+0x2e4>)
 8002926:	805a      	strh	r2, [r3, #2]
			FOTA_NEW_VER_MINOR_ADDRESS);
			g_new_ver.patch = flash_read_int(
 8002928:	4866      	ldr	r0, [pc, #408]	; (8002ac4 <main+0x2ec>)
 800292a:	f002 fe83 	bl	8005634 <flash_read_int>
 800292e:	4603      	mov	r3, r0
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b62      	ldr	r3, [pc, #392]	; (8002abc <main+0x2e4>)
 8002934:	809a      	strh	r2, [r3, #4]
			FOTA_NEW_VER_PATCH_ADDRESS);
			firmware.current_address = firmware.new_address;
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <main+0x2ac>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <main+0x2ac>)
 800293c:	6053      	str	r3, [r2, #4]

			HAL_FLASH_Unlock();
 800293e:	f000 ffbb 	bl	80038b8 <HAL_FLASH_Unlock>
			flash_erase(FOTA_FLAG_NEED_UPDATE);
 8002942:	484d      	ldr	r0, [pc, #308]	; (8002a78 <main+0x2a0>)
 8002944:	f002 fdda 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_FLAG_NEED_UPDATE, 0x00000000);
 8002948:	2100      	movs	r1, #0
 800294a:	484b      	ldr	r0, [pc, #300]	; (8002a78 <main+0x2a0>)
 800294c:	f002 fe0e 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_ADDRESS, firmware.current_address);
 8002950:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <main+0x2ac>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	484a      	ldr	r0, [pc, #296]	; (8002a80 <main+0x2a8>)
 8002958:	f002 fe08 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS, g_new_ver.major);
 800295c:	4b57      	ldr	r3, [pc, #348]	; (8002abc <main+0x2e4>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	4849      	ldr	r0, [pc, #292]	; (8002a88 <main+0x2b0>)
 8002964:	f002 fe02 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS, g_new_ver.minor);
 8002968:	4b54      	ldr	r3, [pc, #336]	; (8002abc <main+0x2e4>)
 800296a:	885b      	ldrh	r3, [r3, #2]
 800296c:	4619      	mov	r1, r3
 800296e:	4848      	ldr	r0, [pc, #288]	; (8002a90 <main+0x2b8>)
 8002970:	f002 fdfc 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS, g_new_ver.patch);
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <main+0x2e4>)
 8002976:	889b      	ldrh	r3, [r3, #4]
 8002978:	4619      	mov	r1, r3
 800297a:	4846      	ldr	r0, [pc, #280]	; (8002a94 <main+0x2bc>)
 800297c:	f002 fdf6 	bl	800556c <flash_write_int>

			flash_erase(FOTA_STATE_UPDATE);
 8002980:	4851      	ldr	r0, [pc, #324]	; (8002ac8 <main+0x2f0>)
 8002982:	f002 fdbb 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_STATE_UPDATE, fota_state);
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <main+0x2dc>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	484e      	ldr	r0, [pc, #312]	; (8002ac8 <main+0x2f0>)
 800298e:	f002 fded 	bl	800556c <flash_write_int>
			flash_write_array(FOTA_PHONE_REQUEST, phone_number_request, 12);
 8002992:	220c      	movs	r2, #12
 8002994:	4943      	ldr	r1, [pc, #268]	; (8002aa4 <main+0x2cc>)
 8002996:	4844      	ldr	r0, [pc, #272]	; (8002aa8 <main+0x2d0>)
 8002998:	f002 fe06 	bl	80055a8 <flash_write_array>
			HAL_FLASH_Lock();
 800299c:	f000 ffc6 	bl	800392c <HAL_FLASH_Lock>
			break;
 80029a0:	e0c7      	b.n	8002b32 <main+0x35a>
		case FOTA_FILE_ERROR:
			HAL_FLASH_Unlock();
 80029a2:	f000 ff89 	bl	80038b8 <HAL_FLASH_Unlock>
			flash_erase(FOTA_FLAG_NEED_UPDATE);
 80029a6:	4834      	ldr	r0, [pc, #208]	; (8002a78 <main+0x2a0>)
 80029a8:	f002 fda8 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_FLAG_NEED_UPDATE, 0x00000000);
 80029ac:	2100      	movs	r1, #0
 80029ae:	4832      	ldr	r0, [pc, #200]	; (8002a78 <main+0x2a0>)
 80029b0:	f002 fddc 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_ADDRESS, firmware.current_address);
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <main+0x2ac>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4619      	mov	r1, r3
 80029ba:	4831      	ldr	r0, [pc, #196]	; (8002a80 <main+0x2a8>)
 80029bc:	f002 fdd6 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
					g_current_ver.major);
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <main+0x2b4>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
 80029c4:	4619      	mov	r1, r3
 80029c6:	4830      	ldr	r0, [pc, #192]	; (8002a88 <main+0x2b0>)
 80029c8:	f002 fdd0 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
					g_current_ver.minor);
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <main+0x2b4>)
 80029ce:	885b      	ldrh	r3, [r3, #2]
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
 80029d0:	4619      	mov	r1, r3
 80029d2:	482f      	ldr	r0, [pc, #188]	; (8002a90 <main+0x2b8>)
 80029d4:	f002 fdca 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
					g_current_ver.patch);
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <main+0x2b4>)
 80029da:	889b      	ldrh	r3, [r3, #4]
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
 80029dc:	4619      	mov	r1, r3
 80029de:	482d      	ldr	r0, [pc, #180]	; (8002a94 <main+0x2bc>)
 80029e0:	f002 fdc4 	bl	800556c <flash_write_int>
			flash_erase(FOTA_STATE_UPDATE);
 80029e4:	4838      	ldr	r0, [pc, #224]	; (8002ac8 <main+0x2f0>)
 80029e6:	f002 fd89 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_STATE_UPDATE, fota_state);
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <main+0x2dc>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4835      	ldr	r0, [pc, #212]	; (8002ac8 <main+0x2f0>)
 80029f2:	f002 fdbb 	bl	800556c <flash_write_int>
			flash_write_array(FOTA_PHONE_REQUEST, phone_number_request, 12);
 80029f6:	220c      	movs	r2, #12
 80029f8:	492a      	ldr	r1, [pc, #168]	; (8002aa4 <main+0x2cc>)
 80029fa:	482b      	ldr	r0, [pc, #172]	; (8002aa8 <main+0x2d0>)
 80029fc:	f002 fdd4 	bl	80055a8 <flash_write_array>
			HAL_FLASH_Lock();
 8002a00:	f000 ff94 	bl	800392c <HAL_FLASH_Lock>
			break;
 8002a04:	e095      	b.n	8002b32 <main+0x35a>
		case FOTA_WRITE_ERROR:
			HAL_FLASH_Unlock();
 8002a06:	f000 ff57 	bl	80038b8 <HAL_FLASH_Unlock>
			flash_erase(FOTA_FLAG_NEED_UPDATE);
 8002a0a:	481b      	ldr	r0, [pc, #108]	; (8002a78 <main+0x2a0>)
 8002a0c:	f002 fd76 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_FLAG_NEED_UPDATE, 0x00000000);
 8002a10:	2100      	movs	r1, #0
 8002a12:	4819      	ldr	r0, [pc, #100]	; (8002a78 <main+0x2a0>)
 8002a14:	f002 fdaa 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_ADDRESS, firmware.current_address);
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <main+0x2ac>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4818      	ldr	r0, [pc, #96]	; (8002a80 <main+0x2a8>)
 8002a20:	f002 fda4 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
					g_current_ver.major);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <main+0x2b4>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4817      	ldr	r0, [pc, #92]	; (8002a88 <main+0x2b0>)
 8002a2c:	f002 fd9e 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
					g_current_ver.minor);
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <main+0x2b4>)
 8002a32:	885b      	ldrh	r3, [r3, #2]
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
 8002a34:	4619      	mov	r1, r3
 8002a36:	4816      	ldr	r0, [pc, #88]	; (8002a90 <main+0x2b8>)
 8002a38:	f002 fd98 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
					g_current_ver.patch);
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <main+0x2b4>)
 8002a3e:	889b      	ldrh	r3, [r3, #4]
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
 8002a40:	4619      	mov	r1, r3
 8002a42:	4814      	ldr	r0, [pc, #80]	; (8002a94 <main+0x2bc>)
 8002a44:	f002 fd92 	bl	800556c <flash_write_int>
			flash_erase(FOTA_STATE_UPDATE);
 8002a48:	481f      	ldr	r0, [pc, #124]	; (8002ac8 <main+0x2f0>)
 8002a4a:	f002 fd57 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_STATE_UPDATE, fota_state);
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <main+0x2dc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	481c      	ldr	r0, [pc, #112]	; (8002ac8 <main+0x2f0>)
 8002a56:	f002 fd89 	bl	800556c <flash_write_int>
			flash_write_array(FOTA_PHONE_REQUEST, phone_number_request, 12);
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <main+0x2cc>)
 8002a5e:	4812      	ldr	r0, [pc, #72]	; (8002aa8 <main+0x2d0>)
 8002a60:	f002 fda2 	bl	80055a8 <flash_write_array>
			HAL_FLASH_Lock();
 8002a64:	f000 ff62 	bl	800392c <HAL_FLASH_Lock>
			break;
 8002a68:	e063      	b.n	8002b32 <main+0x35a>
 8002a6a:	bf00      	nop
 8002a6c:	200000f8 	.word	0x200000f8
 8002a70:	20000394 	.word	0x20000394
 8002a74:	20000348 	.word	0x20000348
 8002a78:	0803fc00 	.word	0x0803fc00
 8002a7c:	200000d4 	.word	0x200000d4
 8002a80:	0803fc04 	.word	0x0803fc04
 8002a84:	2000008c 	.word	0x2000008c
 8002a88:	0803fc08 	.word	0x0803fc08
 8002a8c:	200000e8 	.word	0x200000e8
 8002a90:	0803fc0c 	.word	0x0803fc0c
 8002a94:	0803fc10 	.word	0x0803fc10
 8002a98:	0803fd04 	.word	0x0803fd04
 8002a9c:	20000098 	.word	0x20000098
 8002aa0:	0803fd14 	.word	0x0803fd14
 8002aa4:	200000d8 	.word	0x200000d8
 8002aa8:	0803fd08 	.word	0x0803fd08
 8002aac:	08007800 	.word	0x08007800
 8002ab0:	08023800 	.word	0x08023800
 8002ab4:	200000d5 	.word	0x200000d5
 8002ab8:	0803fc14 	.word	0x0803fc14
 8002abc:	200000f0 	.word	0x200000f0
 8002ac0:	0803fc18 	.word	0x0803fc18
 8002ac4:	0803fc1c 	.word	0x0803fc1c
 8002ac8:	0803fd00 	.word	0x0803fd00
		case FOTA_CRC_ERROR:
			HAL_FLASH_Unlock();
 8002acc:	f000 fef4 	bl	80038b8 <HAL_FLASH_Unlock>
			flash_erase(FOTA_FLAG_NEED_UPDATE);
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <main+0x360>)
 8002ad2:	f002 fd13 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_FLAG_NEED_UPDATE, 0x00000000);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4817      	ldr	r0, [pc, #92]	; (8002b38 <main+0x360>)
 8002ada:	f002 fd47 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_ADDRESS, firmware.current_address);
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <main+0x364>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4816      	ldr	r0, [pc, #88]	; (8002b40 <main+0x368>)
 8002ae6:	f002 fd41 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
					g_current_ver.major);
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <main+0x36c>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
			flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS,
 8002aee:	4619      	mov	r1, r3
 8002af0:	4815      	ldr	r0, [pc, #84]	; (8002b48 <main+0x370>)
 8002af2:	f002 fd3b 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
					g_current_ver.minor);
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <main+0x36c>)
 8002af8:	885b      	ldrh	r3, [r3, #2]
			flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS,
 8002afa:	4619      	mov	r1, r3
 8002afc:	4813      	ldr	r0, [pc, #76]	; (8002b4c <main+0x374>)
 8002afe:	f002 fd35 	bl	800556c <flash_write_int>
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
					g_current_ver.patch);
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <main+0x36c>)
 8002b04:	889b      	ldrh	r3, [r3, #4]
			flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS,
 8002b06:	4619      	mov	r1, r3
 8002b08:	4811      	ldr	r0, [pc, #68]	; (8002b50 <main+0x378>)
 8002b0a:	f002 fd2f 	bl	800556c <flash_write_int>
			flash_erase(FOTA_STATE_UPDATE);
 8002b0e:	4811      	ldr	r0, [pc, #68]	; (8002b54 <main+0x37c>)
 8002b10:	f002 fcf4 	bl	80054fc <flash_erase>
			flash_write_int(FOTA_STATE_UPDATE, fota_state);
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <main+0x380>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <main+0x37c>)
 8002b1c:	f002 fd26 	bl	800556c <flash_write_int>
			flash_write_array(FOTA_PHONE_REQUEST, phone_number_request, 12);
 8002b20:	220c      	movs	r2, #12
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <main+0x384>)
 8002b24:	480e      	ldr	r0, [pc, #56]	; (8002b60 <main+0x388>)
 8002b26:	f002 fd3f 	bl	80055a8 <flash_write_array>
			HAL_FLASH_Lock();
 8002b2a:	f000 feff 	bl	800392c <HAL_FLASH_Lock>
			break;
 8002b2e:	e000      	b.n	8002b32 <main+0x35a>
		default:
			break;
 8002b30:	bf00      	nop
	}
	NVIC_SystemReset();
 8002b32:	f7ff fca7 	bl	8002484 <__NVIC_SystemReset>
 8002b36:	bf00      	nop
 8002b38:	0803fc00 	.word	0x0803fc00
 8002b3c:	2000008c 	.word	0x2000008c
 8002b40:	0803fc04 	.word	0x0803fc04
 8002b44:	200000e8 	.word	0x200000e8
 8002b48:	0803fc08 	.word	0x0803fc08
 8002b4c:	0803fc0c 	.word	0x0803fc0c
 8002b50:	0803fc10 	.word	0x0803fc10
 8002b54:	0803fd00 	.word	0x0803fd00
 8002b58:	200000d5 	.word	0x200000d5
 8002b5c:	200000d8 	.word	0x200000d8
 8002b60:	0803fd08 	.word	0x0803fd08

08002b64 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b092      	sub	sp, #72	; 0x48
 8002b68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	2234      	movs	r2, #52	; 0x34
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f002 fdbe 	bl	80056f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b78:	463b      	mov	r3, r7
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <SystemClock_Config+0x98>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <SystemClock_Config+0x98>)
 8002b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b94:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b96:	2302      	movs	r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002baa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8002bb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 f85e 	bl	8003c7c <HAL_RCC_OscConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <SystemClock_Config+0x66>
	{
		Error_Handler();
 8002bc6:	f000 f8d3 	bl	8002d70 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002bca:	230f      	movs	r3, #15
 8002bcc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bde:	463b      	mov	r3, r7
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fb7a 	bl	80042dc <HAL_RCC_ClockConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8002bee:	f000 f8bf 	bl	8002d70 <Error_Handler>
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	3748      	adds	r7, #72	; 0x48
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40007000 	.word	0x40007000

08002c00 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <MX_CRC_Init+0x20>)
 8002c06:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <MX_CRC_Init+0x24>)
 8002c08:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <MX_CRC_Init+0x20>)
 8002c0c:	f000 fbd5 	bl	80033ba <HAL_CRC_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8002c16:	f000 f8ab 	bl	8002d70 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000038c 	.word	0x2000038c
 8002c24:	40023000 	.word	0x40023000

08002c28 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <MX_USART2_UART_Init+0x50>)
 8002c30:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c38:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c4e:	220c      	movs	r2, #12
 8002c50:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <MX_USART2_UART_Init+0x4c>)
 8002c60:	f001 fda8 	bl	80047b4 <HAL_UART_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8002c6a:	f000 f881 	bl	8002d70 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000394 	.word	0x20000394
 8002c78:	40004400 	.word	0x40004400

08002c7c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_DMA_Init+0x38>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <MX_DMA_Init+0x38>)
 8002c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	61d3      	str	r3, [r2, #28]
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_DMA_Init+0x38>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2010      	movs	r0, #16
 8002ca0:	f000 fb55 	bl	800334e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002ca4:	2010      	movs	r0, #16
 8002ca6:	f000 fb6e 	bl	8003386 <HAL_NVIC_EnableIRQ>

}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800

08002cb8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cbe:	f107 030c 	add.w	r3, r7, #12
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <MX_GPIO_Init+0x74>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2104      	movs	r1, #4
 8002d02:	480b      	ldr	r0, [pc, #44]	; (8002d30 <MX_GPIO_Init+0x78>)
 8002d04:	f000 ffa2 	bl	8003c4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DTR_Pin */
	GPIO_InitStruct.Pin = DTR_Pin;
 8002d08:	2304      	movs	r3, #4
 8002d0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DTR_GPIO_Port, &GPIO_InitStruct);
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4804      	ldr	r0, [pc, #16]	; (8002d30 <MX_GPIO_Init+0x78>)
 8002d20:	f000 fe14 	bl	800394c <HAL_GPIO_Init>

}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40020400 	.word	0x40020400

08002d34 <sim7x00_rx_comming>:

/* USER CODE BEGIN 4 */
void sim7x00_rx_comming()
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	rx_flag = true;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <sim7x00_rx_comming+0x2c>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&SIM_UART, rx_buffer, RX_LEN);
 8002d3e:	f44f 7211 	mov.w	r2, #580	; 0x244
 8002d42:	4908      	ldr	r1, [pc, #32]	; (8002d64 <sim7x00_rx_comming+0x30>)
 8002d44:	4808      	ldr	r0, [pc, #32]	; (8002d68 <sim7x00_rx_comming+0x34>)
 8002d46:	f001 fe14 	bl	8004972 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <sim7x00_rx_comming+0x38>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <sim7x00_rx_comming+0x38>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	200000f6 	.word	0x200000f6
 8002d64:	200000f8 	.word	0x200000f8
 8002d68:	20000394 	.word	0x20000394
 8002d6c:	20000348 	.word	0x20000348

08002d70 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		NVIC_SystemReset();
 8002d78:	f7ff fb84 	bl	8002484 <__NVIC_SystemReset>

08002d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_MspInit+0x58>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4a13      	ldr	r2, [pc, #76]	; (8002dd4 <HAL_MspInit+0x58>)
 8002d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	6253      	str	r3, [r2, #36]	; 0x24
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_MspInit+0x58>)
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_MspInit+0x58>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <HAL_MspInit+0x58>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_MspInit+0x58>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_MspInit+0x58>)
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_MspInit+0x58>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6253      	str	r3, [r2, #36]	; 0x24
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_MspInit+0x58>)
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40023800 	.word	0x40023800

08002dd8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_CRC_MspInit+0x34>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10b      	bne.n	8002e02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_CRC_MspInit+0x38>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_CRC_MspInit+0x38>)
 8002df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002df4:	61d3      	str	r3, [r2, #28]
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_CRC_MspInit+0x38>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40023000 	.word	0x40023000
 8002e10:	40023800 	.word	0x40023800

08002e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <HAL_UART_MspInit+0xd8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d156      	bne.n	8002ee4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e36:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	6253      	str	r3, [r2, #36]	; 0x24
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <HAL_UART_MspInit+0xdc>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e66:	230c      	movs	r3, #12
 8002e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e76:	2307      	movs	r3, #7
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	481c      	ldr	r0, [pc, #112]	; (8002ef4 <HAL_UART_MspInit+0xe0>)
 8002e82:	f000 fd63 	bl	800394c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002e88:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <HAL_UART_MspInit+0xe8>)
 8002e8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e9e:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002eb8:	480f      	ldr	r0, [pc, #60]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002eba:	f000 facd 	bl	8003458 <HAL_DMA_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8002ec4:	f7ff ff54 	bl	8002d70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_UART_MspInit+0xe4>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2026      	movs	r0, #38	; 0x26
 8002eda:	f000 fa38 	bl	800334e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ede:	2026      	movs	r0, #38	; 0x26
 8002ee0:	f000 fa51 	bl	8003386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3728      	adds	r7, #40	; 0x28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40004400 	.word	0x40004400
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	20000348 	.word	0x20000348
 8002efc:	4002606c 	.word	0x4002606c

08002f00 <__NVIC_SystemReset>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002f04:	f3bf 8f4f 	dsb	sy
}
 8002f08:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <__NVIC_SystemReset+0x24>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <__NVIC_SystemReset+0x24>)
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_SystemReset+0x28>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f1a:	f3bf 8f4f 	dsb	sy
}
 8002f1e:	bf00      	nop
    __NOP();
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <__NVIC_SystemReset+0x20>
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	05fa0004 	.word	0x05fa0004

08002f2c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	NVIC_SystemReset();
 8002f30:	f7ff ffe6 	bl	8002f00 <__NVIC_SystemReset>

08002f34 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8002f38:	f7ff ffe2 	bl	8002f00 <__NVIC_SystemReset>

08002f3c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */
	NVIC_SystemReset();
 8002f40:	f7ff ffde 	bl	8002f00 <__NVIC_SystemReset>

08002f44 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 8002f48:	f7ff ffda 	bl	8002f00 <__NVIC_SystemReset>

08002f4c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 8002f50:	f7ff ffd6 	bl	8002f00 <__NVIC_SystemReset>

08002f54 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002f7c:	f000 f8d2 	bl	8003124 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <DMA1_Channel6_IRQHandler+0x10>)
 8002f8a:	f000 fbb7 	bl	80036fc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000348 	.word	0x20000348

08002f98 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <USART2_IRQHandler+0x10>)
 8002f9e:	f001 fd37 	bl	8004a10 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000394 	.word	0x20000394

08002fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb4:	4a14      	ldr	r2, [pc, #80]	; (8003008 <_sbrk+0x5c>)
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <_sbrk+0x60>)
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <_sbrk+0x64>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <_sbrk+0x68>)
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d207      	bcs.n	8002fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fdc:	f002 fb60 	bl	80056a0 <__errno>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e009      	b.n	8003000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <_sbrk+0x64>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <_sbrk+0x64>)
 8002ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20008000 	.word	0x20008000
 800300c:	00000400 	.word	0x00000400
 8003010:	2000033c 	.word	0x2000033c
 8003014:	200003f0 	.word	0x200003f0

08003018 <SystemInit>:
 *         SystemCoreClock variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <SystemInit+0x14>)
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <SystemInit+0x18>)
 8003020:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	08002000 	.word	0x08002000

08003034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003036:	490d      	ldr	r1, [pc, #52]	; (800306c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003038:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800303c:	e002      	b.n	8003044 <LoopCopyDataInit>

0800303e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003042:	3304      	adds	r3, #4

08003044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003048:	d3f9      	bcc.n	800303e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800304c:	4c0a      	ldr	r4, [pc, #40]	; (8003078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003050:	e001      	b.n	8003056 <LoopFillZerobss>

08003052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003054:	3204      	adds	r2, #4

08003056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003058:	d3fb      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800305a:	f7ff ffdd 	bl	8003018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f002 fb25 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003062:	f7ff fbb9 	bl	80027d8 <main>
  bx lr
 8003066:	4770      	bx	lr
  ldr r0, =_sdata
 8003068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800306c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003070:	08006088 	.word	0x08006088
  ldr r2, =_sbss
 8003074:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003078:	200003ec 	.word	0x200003ec

0800307c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800307c:	e7fe      	b.n	800307c <ADC1_IRQHandler>

0800307e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003088:	2003      	movs	r0, #3
 800308a:	f000 f955 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800308e:	200f      	movs	r0, #15
 8003090:	f000 f80e 	bl	80030b0 <HAL_InitTick>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	71fb      	strb	r3, [r7, #7]
 800309e:	e001      	b.n	80030a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030a0:	f7ff fe6c 	bl	8002d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030a4:	79fb      	ldrb	r3, [r7, #7]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_InitTick+0x68>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d022      	beq.n	800310a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_InitTick+0x6c>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_InitTick+0x68>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f962 	bl	80033a2 <HAL_SYSTICK_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10f      	bne.n	8003104 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d809      	bhi.n	80030fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ea:	2200      	movs	r2, #0
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	f000 f92c 	bl	800334e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_InitTick+0x70>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e007      	b.n	800310e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e004      	b.n	800310e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e001      	b.n	800310e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000008 	.word	0x20000008
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_IncTick+0x1c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_IncTick+0x20>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4413      	add	r3, r2
 8003132:	4a03      	ldr	r2, [pc, #12]	; (8003140 <HAL_IncTick+0x1c>)
 8003134:	6013      	str	r3, [r2, #0]
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	200003d8 	.word	0x200003d8
 8003144:	20000008 	.word	0x20000008

08003148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b02      	ldr	r3, [pc, #8]	; (8003158 <HAL_GetTick+0x10>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	200003d8 	.word	0x200003d8

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff fff0 	bl	8003148 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d004      	beq.n	8003180 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_Delay+0x40>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003180:	bf00      	nop
 8003182:	f7ff ffe1 	bl	8003148 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	429a      	cmp	r2, r3
 8003190:	d8f7      	bhi.n	8003182 <HAL_Delay+0x26>
  {
  }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000008 	.word	0x20000008

080031a0 <__NVIC_SetPriorityGrouping>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4906      	ldr	r1, [pc, #24]	; (8003238 <__NVIC_EnableIRQ+0x34>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100

0800323c <__NVIC_SetPriority>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	6039      	str	r1, [r7, #0]
 8003246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324c:	2b00      	cmp	r3, #0
 800324e:	db0a      	blt.n	8003266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2da      	uxtb	r2, r3
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <__NVIC_SetPriority+0x4c>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	0112      	lsls	r2, r2, #4
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	440b      	add	r3, r1
 8003260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003264:	e00a      	b.n	800327c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4908      	ldr	r1, [pc, #32]	; (800328c <__NVIC_SetPriority+0x50>)
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	3b04      	subs	r3, #4
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	440b      	add	r3, r1
 800327a:	761a      	strb	r2, [r3, #24]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <NVIC_EncodePriority>:
{
 8003290:	b480      	push	{r7}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f1c3 0307 	rsb	r3, r3, #7
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf28      	it	cs
 80032ae:	2304      	movcs	r3, #4
 80032b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d902      	bls.n	80032c0 <NVIC_EncodePriority+0x30>
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3b03      	subs	r3, #3
 80032be:	e000      	b.n	80032c2 <NVIC_EncodePriority+0x32>
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	f04f 32ff 	mov.w	r2, #4294967295
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	401a      	ands	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d8:	f04f 31ff 	mov.w	r1, #4294967295
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa01 f303 	lsl.w	r3, r1, r3
 80032e2:	43d9      	mvns	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	4313      	orrs	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3724      	adds	r7, #36	; 0x24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff90 	bl	800323c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff2d 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff42 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff90 	bl	8003290 <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5f 	bl	800323c <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff35 	bl	8003204 <__NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ffa2 	bl	80032f4 <SysTick_Config>
 80033b0:	4603      	mov	r3, r0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e00e      	b.n	80033ea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	795b      	ldrb	r3, [r3, #5]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fcfb 	bl	8002dd8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b087      	sub	sp, #28
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2202      	movs	r2, #2
 8003406:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e00a      	b.n	8003434 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	441a      	add	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	429a      	cmp	r2, r3
 800343a:	d3f0      	bcc.n	800341e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800344a:	693b      	ldr	r3, [r7, #16]
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
	...

08003458 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e059      	b.n	800351e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_DMA_Init+0xd0>)
 8003472:	429a      	cmp	r2, r3
 8003474:	d80f      	bhi.n	8003496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_DMA_Init+0xd4>)
 800347e:	4413      	add	r3, r2
 8003480:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_DMA_Init+0xd8>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <HAL_DMA_Init+0xdc>)
 8003492:	63da      	str	r2, [r3, #60]	; 0x3c
 8003494:	e00e      	b.n	80034b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_DMA_Init+0xe0>)
 800349e:	4413      	add	r3, r2
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <HAL_DMA_Init+0xd8>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_DMA_Init+0xe4>)
 80034b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40026407 	.word	0x40026407
 800352c:	bffd9ff8 	.word	0xbffd9ff8
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	40026000 	.word	0x40026000
 8003538:	bffd9bf8 	.word	0xbffd9bf8
 800353c:	40026400 	.word	0x40026400

08003540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x20>
 800355c:	2302      	movs	r3, #2
 800355e:	e04b      	b.n	80035f8 <HAL_DMA_Start_IT+0xb8>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d13a      	bne.n	80035ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f95e 	bl	800385a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 020e 	orr.w	r2, r2, #14
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0204 	bic.w	r2, r2, #4
 80035c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 020a 	orr.w	r2, r2, #10
 80035d6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	e005      	b.n	80035f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d008      	beq.n	800362a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2204      	movs	r2, #4
 800361c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 020e 	bic.w	r2, r2, #14
 8003638:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f003 021c 	and.w	r2, r3, #28
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d005      	beq.n	800369e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e029      	b.n	80036f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 020e 	bic.w	r2, r2, #14
 80036ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 021c 	and.w	r2, r3, #28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f202 	lsl.w	r2, r1, r2
 80036d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
    }
  }
  return status;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f003 031c 	and.w	r3, r3, #28
 800371c:	2204      	movs	r2, #4
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d026      	beq.n	8003776 <HAL_DMA_IRQHandler+0x7a>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d021      	beq.n	8003776 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 021c 	and.w	r2, r3, #28
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	2104      	movs	r1, #4
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2b00      	cmp	r3, #0
 800376a:	d071      	beq.n	8003850 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003774:	e06c      	b.n	8003850 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 031c 	and.w	r3, r3, #28
 800377e:	2202      	movs	r2, #2
 8003780:	409a      	lsls	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02e      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xec>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d029      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 020a 	bic.w	r2, r2, #10
 80037b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 021c 	and.w	r2, r3, #28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2102      	movs	r1, #2
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d038      	beq.n	8003850 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037e6:	e033      	b.n	8003850 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f003 031c 	and.w	r3, r3, #28
 80037f0:	2208      	movs	r2, #8
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02a      	beq.n	8003852 <HAL_DMA_IRQHandler+0x156>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d025      	beq.n	8003852 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 020e 	bic.w	r2, r2, #14
 8003814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 021c 	and.w	r2, r3, #28
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003850:	bf00      	nop
 8003852:	bf00      	nop
}
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f003 021c 	and.w	r2, r3, #28
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b10      	cmp	r3, #16
 800388a:	d108      	bne.n	800389e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800389c:	e007      	b.n	80038ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	60da      	str	r2, [r3, #12]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80038bc:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d121      	bne.n	800390c <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10d      	bne.n	80038f0 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_FLASH_Unlock+0x64>)
 80038d8:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038dc:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_FLASH_Unlock+0x68>)
 80038de:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00e      	b.n	800390e <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038f2:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <HAL_FLASH_Unlock+0x6c>)
 80038f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <HAL_FLASH_Unlock+0x70>)
 80038fa:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_FLASH_Unlock+0x60>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d101      	bne.n	800390c <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40023c00 	.word	0x40023c00
 800391c:	89abcdef 	.word	0x89abcdef
 8003920:	02030405 	.word	0x02030405
 8003924:	8c9daebf 	.word	0x8c9daebf
 8003928:	13141516 	.word	0x13141516

0800392c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_FLASH_Lock+0x1c>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_FLASH_Lock+0x1c>)
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00

0800394c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003962:	e154      	b.n	8003c0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8146 	beq.w	8003c08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d005      	beq.n	8003994 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003990:	2b02      	cmp	r3, #2
 8003992:	d130      	bne.n	80039f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80039ca:	2201      	movs	r2, #1
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0201 	and.w	r2, r3, #1
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d017      	beq.n	8003a32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d123      	bne.n	8003a86 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	6939      	ldr	r1, [r7, #16]
 8003a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80a0 	beq.w	8003c08 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac8:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <HAL_GPIO_Init+0x2e0>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <HAL_GPIO_Init+0x2e0>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <HAL_GPIO_Init+0x2e0>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ae0:	4a53      	ldr	r2, [pc, #332]	; (8003c30 <HAL_GPIO_Init+0x2e4>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	220f      	movs	r2, #15
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_GPIO_Init+0x2e8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d019      	beq.n	8003b40 <HAL_GPIO_Init+0x1f4>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a4a      	ldr	r2, [pc, #296]	; (8003c38 <HAL_GPIO_Init+0x2ec>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <HAL_GPIO_Init+0x1f0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a49      	ldr	r2, [pc, #292]	; (8003c3c <HAL_GPIO_Init+0x2f0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00d      	beq.n	8003b38 <HAL_GPIO_Init+0x1ec>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a48      	ldr	r2, [pc, #288]	; (8003c40 <HAL_GPIO_Init+0x2f4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <HAL_GPIO_Init+0x1e8>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a47      	ldr	r2, [pc, #284]	; (8003c44 <HAL_GPIO_Init+0x2f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_GPIO_Init+0x1e4>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e008      	b.n	8003b42 <HAL_GPIO_Init+0x1f6>
 8003b30:	2305      	movs	r3, #5
 8003b32:	e006      	b.n	8003b42 <HAL_GPIO_Init+0x1f6>
 8003b34:	2303      	movs	r3, #3
 8003b36:	e004      	b.n	8003b42 <HAL_GPIO_Init+0x1f6>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e002      	b.n	8003b42 <HAL_GPIO_Init+0x1f6>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_GPIO_Init+0x1f6>
 8003b40:	2300      	movs	r3, #0
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	f002 0203 	and.w	r2, r2, #3
 8003b48:	0092      	lsls	r2, r2, #2
 8003b4a:	4093      	lsls	r3, r2
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b52:	4937      	ldr	r1, [pc, #220]	; (8003c30 <HAL_GPIO_Init+0x2e4>)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b60:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b84:	4a30      	ldr	r2, [pc, #192]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b8a:	4b2f      	ldr	r3, [pc, #188]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bae:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bb4:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_GPIO_Init+0x2fc>)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f47f aea3 	bne.w	8003964 <HAL_GPIO_Init+0x18>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40020000 	.word	0x40020000
 8003c38:	40020400 	.word	0x40020400
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40010400 	.word	0x40010400

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003c68:	e003      	b.n	8003c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	041a      	lsls	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	619a      	str	r2, [r3, #24]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e31d      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8e:	4b94      	ldr	r3, [pc, #592]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
 8003c96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	4b91      	ldr	r3, [pc, #580]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d07b      	beq.n	8003da6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d006      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d10f      	bne.n	8003cda <HAL_RCC_OscConfig+0x5e>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d10b      	bne.n	8003cda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc2:	4b87      	ldr	r3, [pc, #540]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d06a      	beq.n	8003da4 <HAL_RCC_OscConfig+0x128>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d166      	bne.n	8003da4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e2f7      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e02d      	b.n	8003d4c <HAL_RCC_OscConfig+0xd0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0x96>
 8003cf8:	4b79      	ldr	r3, [pc, #484]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a78      	ldr	r2, [pc, #480]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b76      	ldr	r3, [pc, #472]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a75      	ldr	r2, [pc, #468]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e01c      	b.n	8003d4c <HAL_RCC_OscConfig+0xd0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0xb8>
 8003d1a:	4b71      	ldr	r3, [pc, #452]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a70      	ldr	r2, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b6e      	ldr	r3, [pc, #440]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6d      	ldr	r2, [pc, #436]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xd0>
 8003d34:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a69      	ldr	r2, [pc, #420]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a66      	ldr	r2, [pc, #408]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7ff f9f8 	bl	8003148 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7ff f9f4 	bl	8003148 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e2ad      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7ff f9e4 	bl	8003148 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7ff f9e0 	bl	8003148 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e299      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d96:	4b52      	ldr	r3, [pc, #328]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d05a      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_OscConfig+0x176>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_OscConfig+0x160>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e276      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	493d      	ldr	r1, [pc, #244]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df0:	e03a      	b.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfa:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCC_OscConfig+0x268>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7ff f9a2 	bl	8003148 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e08:	f7ff f99e 	bl	8003148 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e257      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e1a:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	492a      	ldr	r1, [pc, #168]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	604b      	str	r3, [r1, #4]
 8003e3a:	e015      	b.n	8003e68 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCC_OscConfig+0x268>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e42:	f7ff f981 	bl	8003148 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7ff f97d 	bl	8003148 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e236      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80b8 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d170      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_OscConfig+0x218>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e21a      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1a      	ldr	r2, [r3, #32]
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d921      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fc23 	bl	80046f4 <RCC_SetFlashLatencyFromMSIRange>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e208      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4906      	ldr	r1, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	061b      	lsls	r3, r3, #24
 8003ed8:	4901      	ldr	r1, [pc, #4]	; (8003ee0 <HAL_RCC_OscConfig+0x264>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
 8003ede:	e020      	b.n	8003f22 <HAL_RCC_OscConfig+0x2a6>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee8:	4ba4      	ldr	r3, [pc, #656]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	49a1      	ldr	r1, [pc, #644]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efa:	4ba0      	ldr	r3, [pc, #640]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	499c      	ldr	r1, [pc, #624]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fbee 	bl	80046f4 <RCC_SetFlashLatencyFromMSIRange>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1d3      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	0b5b      	lsrs	r3, r3, #13
 8003f28:	3301      	adds	r3, #1
 8003f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f32:	4a92      	ldr	r2, [pc, #584]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	0912      	lsrs	r2, r2, #4
 8003f38:	f002 020f 	and.w	r2, r2, #15
 8003f3c:	4990      	ldr	r1, [pc, #576]	; (8004180 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	5c8a      	ldrb	r2, [r1, r2]
 8003f40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f42:	4a90      	ldr	r2, [pc, #576]	; (8004184 <HAL_RCC_OscConfig+0x508>)
 8003f44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f46:	4b90      	ldr	r3, [pc, #576]	; (8004188 <HAL_RCC_OscConfig+0x50c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f8b0 	bl	80030b0 <HAL_InitTick>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d045      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	e1b5      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d029      	beq.n	8003fba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f66:	4b89      	ldr	r3, [pc, #548]	; (800418c <HAL_RCC_OscConfig+0x510>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7ff f8ec 	bl	8003148 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f74:	f7ff f8e8 	bl	8003148 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e1a1      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f86:	4b7d      	ldr	r3, [pc, #500]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f92:	4b7a      	ldr	r3, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	4977      	ldr	r1, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	4972      	ldr	r1, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x510>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff f8c2 	bl	8003148 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fc8:	f7ff f8be 	bl	8003148 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e177      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fda:	4b68      	ldr	r3, [pc, #416]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d030      	beq.n	8004054 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x514>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004000:	f7ff f8a2 	bl	8003148 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004008:	f7ff f89e 	bl	8003148 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e157      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800401a:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x38c>
 8004026:	e015      	b.n	8004054 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_OscConfig+0x514>)
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7ff f88b 	bl	8003148 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004036:	f7ff f887 	bl	8003148 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e140      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004048:	4b4c      	ldr	r3, [pc, #304]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80b5 	beq.w	80041cc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004066:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10d      	bne.n	800408e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	4b42      	ldr	r3, [pc, #264]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	4a41      	ldr	r2, [pc, #260]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6253      	str	r3, [r2, #36]	; 0x24
 800407e:	4b3f      	ldr	r3, [pc, #252]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408a:	2301      	movs	r3, #1
 800408c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x518>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d118      	bne.n	80040cc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_RCC_OscConfig+0x518>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x518>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a6:	f7ff f84f 	bl	8003148 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ae:	f7ff f84b 	bl	8003148 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b64      	cmp	r3, #100	; 0x64
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e104      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x518>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d106      	bne.n	80040e2 <HAL_RCC_OscConfig+0x466>
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	4a28      	ldr	r2, [pc, #160]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6353      	str	r3, [r2, #52]	; 0x34
 80040e0:	e02d      	b.n	800413e <HAL_RCC_OscConfig+0x4c2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0x488>
 80040ea:	4b24      	ldr	r3, [pc, #144]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	4a23      	ldr	r2, [pc, #140]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f4:	6353      	str	r3, [r2, #52]	; 0x34
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fa:	4a20      	ldr	r2, [pc, #128]	; (800417c <HAL_RCC_OscConfig+0x500>)
 80040fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004100:	6353      	str	r3, [r2, #52]	; 0x34
 8004102:	e01c      	b.n	800413e <HAL_RCC_OscConfig+0x4c2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d10c      	bne.n	8004126 <HAL_RCC_OscConfig+0x4aa>
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004116:	6353      	str	r3, [r2, #52]	; 0x34
 8004118:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004122:	6353      	str	r3, [r2, #52]	; 0x34
 8004124:	e00b      	b.n	800413e <HAL_RCC_OscConfig+0x4c2>
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	4a14      	ldr	r2, [pc, #80]	; (800417c <HAL_RCC_OscConfig+0x500>)
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	6353      	str	r3, [r2, #52]	; 0x34
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800413c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d015      	beq.n	8004172 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fe ffff 	bl	8003148 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fe fffb 	bl	8003148 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	; 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0b2      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_OscConfig+0x500>)
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ee      	beq.n	800414e <HAL_RCC_OscConfig+0x4d2>
 8004170:	e023      	b.n	80041ba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe ffe9 	bl	8003148 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004178:	e019      	b.n	80041ae <HAL_RCC_OscConfig+0x532>
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	0800602c 	.word	0x0800602c
 8004184:	20000000 	.word	0x20000000
 8004188:	20000004 	.word	0x20000004
 800418c:	42470020 	.word	0x42470020
 8004190:	42470680 	.word	0x42470680
 8004194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fe ffd6 	bl	8003148 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e08d      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ae:	4b49      	ldr	r3, [pc, #292]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ba:	7ffb      	ldrb	r3, [r7, #31]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b44      	ldr	r3, [pc, #272]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	4a43      	ldr	r2, [pc, #268]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d079      	beq.n	80042c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d056      	beq.n	8004288 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d13b      	bne.n	800425a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <HAL_RCC_OscConfig+0x65c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe ffae 	bl	8003148 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe ffaa 	bl	8003148 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e063      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	4319      	orrs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	430b      	orrs	r3, r1
 8004226:	492b      	ldr	r1, [pc, #172]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x65c>)
 800422e:	2201      	movs	r2, #1
 8004230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004232:	f7fe ff89 	bl	8003148 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe ff85 	bl	8003148 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e03e      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x5be>
 8004258:	e036      	b.n	80042c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_RCC_OscConfig+0x65c>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe ff72 	bl	8003148 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe ff6e 	bl	8003148 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e027      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800427a:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x5ec>
 8004286:	e01f      	b.n	80042c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e01a      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <HAL_RCC_OscConfig+0x658>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d10d      	bne.n	80042c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	42470060 	.word	0x42470060

080042dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e11a      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d919      	bls.n	8004332 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d105      	bne.n	8004310 <HAL_RCC_ClockConfig+0x34>
 8004304:	4b8a      	ldr	r3, [pc, #552]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a89      	ldr	r2, [pc, #548]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b87      	ldr	r3, [pc, #540]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 0201 	bic.w	r2, r3, #1
 8004318:	4985      	ldr	r1, [pc, #532]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004320:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0f9      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433e:	4b7d      	ldr	r3, [pc, #500]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	497a      	ldr	r1, [pc, #488]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 808e 	beq.w	800447a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004366:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0d7      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d107      	bne.n	800438e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d115      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0cb      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004396:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0bf      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043a6:	4b63      	ldr	r3, [pc, #396]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0b7      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	495c      	ldr	r1, [pc, #368]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fe febe 	bl	8003148 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d112      	bne.n	80043fc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fe feb6 	bl	8003148 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e09b      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ee:	4b51      	ldr	r3, [pc, #324]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d1ee      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xfc>
 80043fa:	e03e      	b.n	800447a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b03      	cmp	r3, #3
 8004402:	d112      	bne.n	800442a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004404:	e00a      	b.n	800441c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004406:	f7fe fe9f 	bl	8003148 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e084      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441c:	4b45      	ldr	r3, [pc, #276]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b0c      	cmp	r3, #12
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_ClockConfig+0x12a>
 8004428:	e027      	b.n	800447a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d11d      	bne.n	800446e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004432:	e00a      	b.n	800444a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004434:	f7fe fe88 	bl	8003148 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e06d      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800444a:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d1ee      	bne.n	8004434 <HAL_RCC_ClockConfig+0x158>
 8004456:	e010      	b.n	800447a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fe fe76 	bl	8003148 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e05b      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800446e:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1ee      	bne.n	8004458 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447a:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	429a      	cmp	r2, r3
 8004486:	d219      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCC_ClockConfig+0x1be>
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a27      	ldr	r2, [pc, #156]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 0201 	bic.w	r2, r3, #1
 80044a2:	4923      	ldr	r1, [pc, #140]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCC_ClockConfig+0x254>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e034      	b.n	8004526 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4917      	ldr	r1, [pc, #92]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044fa:	f000 f823 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_ClockConfig+0x258>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490b      	ldr	r1, [pc, #44]	; (8004538 <HAL_RCC_ClockConfig+0x25c>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_RCC_ClockConfig+0x260>)
 8004514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCC_ClockConfig+0x264>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fdc8 	bl	80030b0 <HAL_InitTick>
 8004520:	4603      	mov	r3, r0
 8004522:	72fb      	strb	r3, [r7, #11]

  return status;
 8004524:	7afb      	ldrb	r3, [r7, #11]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00
 8004534:	40023800 	.word	0x40023800
 8004538:	0800602c 	.word	0x0800602c
 800453c:	20000000 	.word	0x20000000
 8004540:	20000004 	.word	0x20000004

08004544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	b5b0      	push	{r4, r5, r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800454a:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <HAL_RCC_GetSysClockFreq+0x13c>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d00c      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x30>
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d87c      	bhi.n	8004658 <HAL_RCC_GetSysClockFreq+0x114>
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x24>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x2a>
 8004566:	e077      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCC_GetSysClockFreq+0x140>)
 800456a:	613b      	str	r3, [r7, #16]
      break;
 800456c:	e082      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800456e:	4b46      	ldr	r3, [pc, #280]	; (8004688 <HAL_RCC_GetSysClockFreq+0x144>)
 8004570:	613b      	str	r3, [r7, #16]
      break;
 8004572:	e07f      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	0c9b      	lsrs	r3, r3, #18
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	4a43      	ldr	r2, [pc, #268]	; (800468c <HAL_RCC_GetSysClockFreq+0x148>)
 800457e:	5cd3      	ldrb	r3, [r2, r3]
 8004580:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	0d9b      	lsrs	r3, r3, #22
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	3301      	adds	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458e:	4b3c      	ldr	r3, [pc, #240]	; (8004680 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	4939      	ldr	r1, [pc, #228]	; (8004688 <HAL_RCC_GetSysClockFreq+0x144>)
 80045a4:	fb01 f003 	mul.w	r0, r1, r3
 80045a8:	2100      	movs	r1, #0
 80045aa:	fb01 f102 	mul.w	r1, r1, r2
 80045ae:	1844      	adds	r4, r0, r1
 80045b0:	4935      	ldr	r1, [pc, #212]	; (8004688 <HAL_RCC_GetSysClockFreq+0x144>)
 80045b2:	fba2 0101 	umull	r0, r1, r2, r1
 80045b6:	1863      	adds	r3, r4, r1
 80045b8:	4619      	mov	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	f7fd fde3 	bl	800218c <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4613      	mov	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	e040      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	461c      	mov	r4, r3
 80045d4:	f04f 0500 	mov.w	r5, #0
 80045d8:	4620      	mov	r0, r4
 80045da:	4629      	mov	r1, r5
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	014b      	lsls	r3, r1, #5
 80045e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045ea:	0142      	lsls	r2, r0, #5
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	1b00      	subs	r0, r0, r4
 80045f2:	eb61 0105 	sbc.w	r1, r1, r5
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	018b      	lsls	r3, r1, #6
 8004600:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004604:	0182      	lsls	r2, r0, #6
 8004606:	1a12      	subs	r2, r2, r0
 8004608:	eb63 0301 	sbc.w	r3, r3, r1
 800460c:	f04f 0000 	mov.w	r0, #0
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	00d9      	lsls	r1, r3, #3
 8004616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800461a:	00d0      	lsls	r0, r2, #3
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	1912      	adds	r2, r2, r4
 8004622:	eb45 0303 	adc.w	r3, r5, r3
 8004626:	f04f 0000 	mov.w	r0, #0
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	0299      	lsls	r1, r3, #10
 8004630:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004634:	0290      	lsls	r0, r2, #10
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	461a      	mov	r2, r3
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	f7fd fda1 	bl	800218c <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4613      	mov	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	613b      	str	r3, [r7, #16]
      break;
 8004656:	e00d      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_GetSysClockFreq+0x13c>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0b5b      	lsrs	r3, r3, #13
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	613b      	str	r3, [r7, #16]
      break;
 8004672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004674:	693b      	ldr	r3, [r7, #16]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bdb0      	pop	{r4, r5, r7, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	00f42400 	.word	0x00f42400
 8004688:	016e3600 	.word	0x016e3600
 800468c:	08006020 	.word	0x08006020

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b02      	ldr	r3, [pc, #8]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	20000000 	.word	0x20000000

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a8:	f7ff fff2 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	0800603c 	.word	0x0800603c

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046d0:	f7ff ffde 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0adb      	lsrs	r3, r3, #11
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	0800603c 	.word	0x0800603c

080046f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d12c      	bne.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800470c:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e016      	b.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004724:	4b20      	ldr	r3, [pc, #128]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	6253      	str	r3, [r2, #36]	; 0x24
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004744:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004746:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004750:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004758:	d105      	bne.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004760:	d101      	bne.n	8004766 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004762:	2301      	movs	r3, #1
 8004764:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d105      	bne.n	8004778 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800476c:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f023 0201 	bic.w	r2, r3, #1
 8004780:	490b      	ldr	r1, [pc, #44]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d001      	beq.n	800479a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bc80      	pop	{r7}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e03f      	b.n	8004846 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe fb1a 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fd9b 	bl	8005334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800480c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08a      	sub	sp, #40	; 0x28
 8004852:	af02      	add	r7, sp, #8
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b20      	cmp	r3, #32
 800486c:	d17c      	bne.n	8004968 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_UART_Transmit+0x2c>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e075      	b.n	800496a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_UART_Transmit+0x3e>
 8004888:	2302      	movs	r3, #2
 800488a:	e06e      	b.n	800496a <HAL_UART_Transmit+0x11c>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	; 0x21
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a2:	f7fe fc51 	bl	8003148 <HAL_GetTick>
 80048a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	88fa      	ldrh	r2, [r7, #6]
 80048ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048bc:	d108      	bne.n	80048d0 <HAL_UART_Transmit+0x82>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e003      	b.n	80048d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048e0:	e02a      	b.n	8004938 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2180      	movs	r1, #128	; 0x80
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fb0d 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e036      	b.n	800496a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10b      	bne.n	800491a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	3302      	adds	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
 8004918:	e007      	b.n	800492a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	781a      	ldrb	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3301      	adds	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1cf      	bne.n	80048e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	2140      	movs	r1, #64	; 0x40
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fadd 	bl	8004f0c <UART_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e006      	b.n	800496a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	4613      	mov	r3, r2
 800497e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b20      	cmp	r3, #32
 800498a:	d13c      	bne.n	8004a06 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004992:	88fb      	ldrh	r3, [r7, #6]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e035      	b.n	8004a08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e02e      	b.n	8004a08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 faee 	bl	8004fa0 <UART_Start_Receive_DMA>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d119      	bne.n	8004a02 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d113      	bne.n	80049fe <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049d6:	2300      	movs	r3, #0
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0210 	orr.w	r2, r2, #16
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	e001      	b.n	8004a02 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	e000      	b.n	8004a08 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
  }
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3718      	adds	r7, #24
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_UART_IRQHandler+0x52>
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fbc0 	bl	80051e0 <UART_Receive_IT>
      return;
 8004a60:	e17b      	b.n	8004d5a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80b1 	beq.w	8004bcc <HAL_UART_IRQHandler+0x1bc>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_UART_IRQHandler+0x70>
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80a6 	beq.w	8004bcc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x90>
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f043 0201 	orr.w	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xb0>
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f043 0202 	orr.w	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xd0>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	f043 0204 	orr.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00f      	beq.n	8004b0a <HAL_UART_IRQHandler+0xfa>
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_UART_IRQHandler+0xee>
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0208 	orr.w	r2, r3, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 811e 	beq.w	8004d50 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_UART_IRQHandler+0x11e>
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb59 	bl	80051e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <HAL_UART_IRQHandler+0x146>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d031      	beq.n	8004bba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa9b 	bl	8005092 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d123      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	4a76      	ldr	r2, [pc, #472]	; (8004d60 <HAL_UART_IRQHandler+0x350>)
 8004b88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fd73 	bl	800367a <HAL_DMA_Abort_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	e00e      	b.n	8004bc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8f5 	bl	8004d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	e00a      	b.n	8004bc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8f1 	bl	8004d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	e006      	b.n	8004bc8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8ed 	bl	8004d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bc6:	e0c3      	b.n	8004d50 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	bf00      	nop
    return;
 8004bca:	e0c1      	b.n	8004d50 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 80a1 	bne.w	8004d18 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 809b 	beq.w	8004d18 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8095 	beq.w	8004d18 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	d14e      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004c1c:	8a3b      	ldrh	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 8098 	beq.w	8004d54 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c28:	8a3a      	ldrh	r2, [r7, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	f080 8092 	bcs.w	8004d54 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8a3a      	ldrh	r2, [r7, #16]
 8004c34:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d02b      	beq.n	8004c98 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c4e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0210 	bic.w	r2, r2, #16
 8004c8c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fcb4 	bl	8003600 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fd fc61 	bl	8002570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004cae:	e051      	b.n	8004d54 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d047      	beq.n	8004d58 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d044      	beq.n	8004d58 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cdc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0210 	bic.w	r2, r2, #16
 8004d0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fd fc2d 	bl	8002570 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d16:	e01f      	b.n	8004d58 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d008      	beq.n	8004d34 <HAL_UART_IRQHandler+0x324>
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f9f0 	bl	8005112 <UART_Transmit_IT>
    return;
 8004d32:	e012      	b.n	8004d5a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00d      	beq.n	8004d5a <HAL_UART_IRQHandler+0x34a>
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa31 	bl	80051b0 <UART_EndTransmit_IT>
    return;
 8004d4e:	e004      	b.n	8004d5a <HAL_UART_IRQHandler+0x34a>
    return;
 8004d50:	bf00      	nop
 8004d52:	e002      	b.n	8004d5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_UART_IRQHandler+0x34a>
      return;
 8004d58:	bf00      	nop
  }
}
 8004d5a:	3728      	adds	r7, #40	; 0x28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	080050eb 	.word	0x080050eb

08004d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d12a      	bne.n	8004e1e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0210 	bic.w	r2, r2, #16
 8004e1c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d106      	bne.n	8004e34 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7fd fb9f 	bl	8002570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e32:	e002      	b.n	8004e3a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff ff9e 	bl	8004d76 <HAL_UART_RxCpltCallback>
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d108      	bne.n	8004e6a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7fd fb84 	bl	8002570 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e68:	e002      	b.n	8004e70 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff ff8c 	bl	8004d88 <HAL_UART_RxHalfCpltCallback>
}
 8004e70:	bf00      	nop
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b21      	cmp	r3, #33	; 0x21
 8004eaa:	d108      	bne.n	8004ebe <UART_DMAError+0x46>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004eb8:	68b8      	ldr	r0, [r7, #8]
 8004eba:	f000 f8d5 	bl	8005068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b40      	cmp	r3, #64	; 0x40
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b22      	cmp	r3, #34	; 0x22
 8004ede:	d108      	bne.n	8004ef2 <UART_DMAError+0x7a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004eec:	68b8      	ldr	r0, [r7, #8]
 8004eee:	f000 f8d0 	bl	8005092 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f043 0210 	orr.w	r2, r3, #16
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004efe:	68b8      	ldr	r0, [r7, #8]
 8004f00:	f7ff ff4b 	bl	8004d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1c:	e02c      	b.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d028      	beq.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f2c:	f7fe f90c 	bl	8003148 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d21d      	bcs.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e00f      	b.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d0c3      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2222      	movs	r2, #34	; 0x22
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	4a23      	ldr	r2, [pc, #140]	; (800505c <UART_Start_Receive_DMA+0xbc>)
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <UART_Start_Receive_DMA+0xc0>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	4a21      	ldr	r2, [pc, #132]	; (8005064 <UART_Start_Receive_DMA+0xc4>)
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	f7fe fa9e 	bl	8003540 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005030:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005050:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	08004dad 	.word	0x08004dad
 8005060:	08004e43 	.word	0x08004e43
 8005064:	08004e79 	.word	0x08004e79

08005068 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800507e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0210 	bic.w	r2, r2, #16
 80050d0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fe48 	bl	8004d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b21      	cmp	r3, #33	; 0x21
 8005124:	d13e      	bne.n	80051a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d114      	bne.n	800515a <UART_Transmit_IT+0x48>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	e008      	b.n	800516c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6211      	str	r1, [r2, #32]
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4619      	mov	r1, r3
 800517a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800518e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fdc7 	bl	8004d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b22      	cmp	r3, #34	; 0x22
 80051f2:	f040 8099 	bne.w	8005328 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d117      	bne.n	8005230 <UART_Receive_IT+0x50>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	b29a      	uxth	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
 800522e:	e026      	b.n	800527e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d007      	beq.n	8005254 <UART_Receive_IT+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <UART_Receive_IT+0x82>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e008      	b.n	8005274 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526e:	b2da      	uxtb	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29b      	uxth	r3, r3
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4619      	mov	r1, r3
 800528c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800528e:	2b00      	cmp	r3, #0
 8005290:	d148      	bne.n	8005324 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0220 	bic.w	r2, r2, #32
 80052a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d123      	bne.n	800531a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0210 	bic.w	r2, r2, #16
 80052e6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d10a      	bne.n	800530c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd f92c 	bl	8002570 <HAL_UARTEx_RxEventCallback>
 8005318:	e002      	b.n	8005320 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff fd2b 	bl	8004d76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e002      	b.n	800532a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4313      	orrs	r3, r2
 8005368:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005374:	f023 030c 	bic.w	r3, r3, #12
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	430b      	orrs	r3, r1
 8005380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a55      	ldr	r2, [pc, #340]	; (80054f4 <UART_SetConfig+0x1c0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d103      	bne.n	80053aa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053a2:	f7ff f993 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	e002      	b.n	80053b0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7ff f97b 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 80053ae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b8:	d14c      	bne.n	8005454 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	4a49      	ldr	r2, [pc, #292]	; (80054f8 <UART_SetConfig+0x1c4>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	0119      	lsls	r1, r3, #4
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009a      	lsls	r2, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f0:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <UART_SetConfig+0x1c4>)
 80053f2:	fba3 0302 	umull	r0, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2064      	movs	r0, #100	; 0x64
 80053fa:	fb00 f303 	mul.w	r3, r0, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	3332      	adds	r3, #50	; 0x32
 8005404:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <UART_SetConfig+0x1c4>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005412:	4419      	add	r1, r3
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009a      	lsls	r2, r3, #2
 800541e:	441a      	add	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fbb2 f2f3 	udiv	r2, r2, r3
 800542a:	4b33      	ldr	r3, [pc, #204]	; (80054f8 <UART_SetConfig+0x1c4>)
 800542c:	fba3 0302 	umull	r0, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	2064      	movs	r0, #100	; 0x64
 8005434:	fb00 f303 	mul.w	r3, r0, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	3332      	adds	r3, #50	; 0x32
 800543e:	4a2e      	ldr	r2, [pc, #184]	; (80054f8 <UART_SetConfig+0x1c4>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	f003 0207 	and.w	r2, r3, #7
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	440a      	add	r2, r1
 8005450:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005452:	e04a      	b.n	80054ea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009a      	lsls	r2, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <UART_SetConfig+0x1c4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	0119      	lsls	r1, r3, #4
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009a      	lsls	r2, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	fbb2 f2f3 	udiv	r2, r2, r3
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <UART_SetConfig+0x1c4>)
 800548c:	fba3 0302 	umull	r0, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2064      	movs	r0, #100	; 0x64
 8005494:	fb00 f303 	mul.w	r3, r0, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a16      	ldr	r2, [pc, #88]	; (80054f8 <UART_SetConfig+0x1c4>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054aa:	4419      	add	r1, r3
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c2:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <UART_SetConfig+0x1c4>)
 80054c4:	fba3 0302 	umull	r0, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2064      	movs	r0, #100	; 0x64
 80054cc:	fb00 f303 	mul.w	r3, r0, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <UART_SetConfig+0x1c4>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	440a      	add	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40013800 	.word	0x40013800
 80054f8:	51eb851f 	.word	0x51eb851f

080054fc <flash_erase>:
 * @brief Erase a page.
 * @param pageAddress: start address of page
 * @retval None
 */
void flash_erase(uint32_t pageAddress)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 8005504:	bf00      	nop
 8005506:	4b18      	ldr	r3, [pc, #96]	; (8005568 <flash_erase+0x6c>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d0f9      	beq.n	8005506 <flash_erase+0xa>
	FLASH->PECR |= FLASH_PECR_ERASE;
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <flash_erase+0x6c>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <flash_erase+0x6c>)
 8005518:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800551c:	6053      	str	r3, [r2, #4]
	FLASH->PECR |= FLASH_PECR_PROG;
 800551e:	4b12      	ldr	r3, [pc, #72]	; (8005568 <flash_erase+0x6c>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4a11      	ldr	r2, [pc, #68]	; (8005568 <flash_erase+0x6c>)
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	6053      	str	r3, [r2, #4]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 800552a:	bf00      	nop
 800552c:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <flash_erase+0x6c>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d0f9      	beq.n	800552c <flash_erase+0x30>
	*(__IO uint32_t*) (uint32_t) (pageAddress & ~(FLASH_PAGE_SIZE - 1)) =
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800553e:	461a      	mov	r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	6013      	str	r3, [r2, #0]
			0x00000000;
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <flash_erase+0x6c>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a07      	ldr	r2, [pc, #28]	; (8005568 <flash_erase+0x6c>)
 800554a:	f023 0308 	bic.w	r3, r3, #8
 800554e:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <flash_erase+0x6c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a04      	ldr	r2, [pc, #16]	; (8005568 <flash_erase+0x6c>)
 8005556:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800555a:	6053      	str	r3, [r2, #4]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40023c00 	.word	0x40023c00

0800556c <flash_write_int>:
 * @param address: address want to write the value
 * @param iData: value in integer type
 * @retval None
 */
void flash_write_int(uint32_t address, int32_t iData)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));    //quá trình ghi dữ liệu, tương ứng trong hàm HAL_FLASH_Program
 8005576:	bf00      	nop
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <flash_write_int+0x38>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d0f9      	beq.n	8005578 <flash_write_int+0xc>
	*(__IO uint32_t*) address = iData;    //dữ liệu ở đây là HALFWORD, WORD là uint32_t
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 800558a:	bf00      	nop
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <flash_write_int+0x38>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d0f9      	beq.n	800558c <flash_write_int+0x20>
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	40023c00 	.word	0x40023c00

080055a8 <flash_write_array>:
 * @param arrData: data array
 * @param length: length of arrData
 * @retval None
 */
void flash_write_array(uint32_t address, char *arrData, uint16_t length)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
	uint32_t *pt = (uint32_t*) arrData;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (length + 1) / 4; i++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	827b      	strh	r3, [r7, #18]
 80055be:	e015      	b.n	80055ec <flash_write_array+0x44>
	{
		while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 80055c0:	bf00      	nop
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <flash_write_array+0x88>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d0f9      	beq.n	80055c2 <flash_write_array+0x1a>
		*(__IO uint32_t*) (address + 4 * i) = *pt;
 80055ce:	8a7b      	ldrh	r3, [r7, #18]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6013      	str	r3, [r2, #0]
		pt++;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3304      	adds	r3, #4
 80055e4:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (length + 1) / 4; i++)
 80055e6:	8a7b      	ldrh	r3, [r7, #18]
 80055e8:	3301      	adds	r3, #1
 80055ea:	827b      	strh	r3, [r7, #18]
 80055ec:	8a7a      	ldrh	r2, [r7, #18]
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	3301      	adds	r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da00      	bge.n	80055f8 <flash_write_array+0x50>
 80055f6:	3303      	adds	r3, #3
 80055f8:	109b      	asrs	r3, r3, #2
 80055fa:	429a      	cmp	r2, r3
 80055fc:	dbe0      	blt.n	80055c0 <flash_write_array+0x18>
	}
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 80055fe:	bf00      	nop
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <flash_write_array+0x88>)
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d0f9      	beq.n	8005600 <flash_write_array+0x58>
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <flash_write_array+0x88>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a07      	ldr	r2, [pc, #28]	; (8005630 <flash_write_array+0x88>)
 8005612:	f023 0308 	bic.w	r3, r3, #8
 8005616:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <flash_write_array+0x88>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4a04      	ldr	r2, [pc, #16]	; (8005630 <flash_write_array+0x88>)
 800561e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005622:	6053      	str	r3, [r2, #4]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40023c00 	.word	0x40023c00

08005634 <flash_read_int>:
 * @brief Read value in an address
 * @param address: address want to read the value
 * @retval value in address
 */
uint32_t flash_read_int(uint32_t address)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	uint32_t *val = (uint32_t*) address;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]
	return *val;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <flash_read_array>:
 * @param arrData: buffer to store the data
 * @param length: data length want to read
 * @retval None
 */
void flash_read_array(uint32_t address, char *arrData, uint16_t length)
{
 800564e:	b480      	push	{r7}
 8005650:	b087      	sub	sp, #28
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	4613      	mov	r3, r2
 800565a:	80fb      	strh	r3, [r7, #6]
	uint16_t *pt = (uint16_t*) arrData;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	617b      	str	r3, [r7, #20]

	for (uint16_t i = 0; i < (length + 1) / 2; i++)
 8005660:	2300      	movs	r3, #0
 8005662:	827b      	strh	r3, [r7, #18]
 8005664:	e00e      	b.n	8005684 <flash_read_array+0x36>
	{
		*pt = *(__IO uint16_t*) (address + 2 * i);
 8005666:	8a7b      	ldrh	r3, [r7, #18]
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29a      	uxth	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	801a      	strh	r2, [r3, #0]
		pt++;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3302      	adds	r3, #2
 800567c:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < (length + 1) / 2; i++)
 800567e:	8a7b      	ldrh	r3, [r7, #18]
 8005680:	3301      	adds	r3, #1
 8005682:	827b      	strh	r3, [r7, #18]
 8005684:	8a7a      	ldrh	r2, [r7, #18]
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	3301      	adds	r3, #1
 800568a:	0fd9      	lsrs	r1, r3, #31
 800568c:	440b      	add	r3, r1
 800568e:	105b      	asrs	r3, r3, #1
 8005690:	429a      	cmp	r2, r3
 8005692:	dbe8      	blt.n	8005666 <flash_read_array+0x18>
	}
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <__errno>:
 80056a0:	4b01      	ldr	r3, [pc, #4]	; (80056a8 <__errno+0x8>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	2000000c 	.word	0x2000000c

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2600      	movs	r6, #0
 80056b0:	4d0c      	ldr	r5, [pc, #48]	; (80056e4 <__libc_init_array+0x38>)
 80056b2:	4c0d      	ldr	r4, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1b64      	subs	r4, r4, r5
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	f000 fc72 	bl	8005fa4 <_init>
 80056c0:	2600      	movs	r6, #0
 80056c2:	4d0a      	ldr	r5, [pc, #40]	; (80056ec <__libc_init_array+0x40>)
 80056c4:	4c0a      	ldr	r4, [pc, #40]	; (80056f0 <__libc_init_array+0x44>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	f855 3b04 	ldr.w	r3, [r5], #4
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08006080 	.word	0x08006080
 80056e8:	08006080 	.word	0x08006080
 80056ec:	08006080 	.word	0x08006080
 80056f0:	08006084 	.word	0x08006084

080056f4 <memset>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	4402      	add	r2, r0
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d100      	bne.n	80056fe <memset+0xa>
 80056fc:	4770      	bx	lr
 80056fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005702:	e7f9      	b.n	80056f8 <memset+0x4>

08005704 <siprintf>:
 8005704:	b40e      	push	{r1, r2, r3}
 8005706:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800570a:	b500      	push	{lr}
 800570c:	b09c      	sub	sp, #112	; 0x70
 800570e:	ab1d      	add	r3, sp, #116	; 0x74
 8005710:	9002      	str	r0, [sp, #8]
 8005712:	9006      	str	r0, [sp, #24]
 8005714:	9107      	str	r1, [sp, #28]
 8005716:	9104      	str	r1, [sp, #16]
 8005718:	4808      	ldr	r0, [pc, #32]	; (800573c <siprintf+0x38>)
 800571a:	4909      	ldr	r1, [pc, #36]	; (8005740 <siprintf+0x3c>)
 800571c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005720:	9105      	str	r1, [sp, #20]
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	a902      	add	r1, sp, #8
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	f000 f87e 	bl	8005828 <_svfiprintf_r>
 800572c:	2200      	movs	r2, #0
 800572e:	9b02      	ldr	r3, [sp, #8]
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	b01c      	add	sp, #112	; 0x70
 8005734:	f85d eb04 	ldr.w	lr, [sp], #4
 8005738:	b003      	add	sp, #12
 800573a:	4770      	bx	lr
 800573c:	2000000c 	.word	0x2000000c
 8005740:	ffff0208 	.word	0xffff0208

08005744 <strstr>:
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	780c      	ldrb	r4, [r1, #0]
 8005748:	b164      	cbz	r4, 8005764 <strstr+0x20>
 800574a:	4603      	mov	r3, r0
 800574c:	781a      	ldrb	r2, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	1c5e      	adds	r6, r3, #1
 8005752:	b90a      	cbnz	r2, 8005758 <strstr+0x14>
 8005754:	4610      	mov	r0, r2
 8005756:	e005      	b.n	8005764 <strstr+0x20>
 8005758:	4294      	cmp	r4, r2
 800575a:	d108      	bne.n	800576e <strstr+0x2a>
 800575c:	460d      	mov	r5, r1
 800575e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005762:	b902      	cbnz	r2, 8005766 <strstr+0x22>
 8005764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005766:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800576a:	4297      	cmp	r7, r2
 800576c:	d0f7      	beq.n	800575e <strstr+0x1a>
 800576e:	4633      	mov	r3, r6
 8005770:	e7ec      	b.n	800574c <strstr+0x8>

08005772 <__ssputs_r>:
 8005772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005776:	688e      	ldr	r6, [r1, #8]
 8005778:	4682      	mov	sl, r0
 800577a:	429e      	cmp	r6, r3
 800577c:	460c      	mov	r4, r1
 800577e:	4690      	mov	r8, r2
 8005780:	461f      	mov	r7, r3
 8005782:	d838      	bhi.n	80057f6 <__ssputs_r+0x84>
 8005784:	898a      	ldrh	r2, [r1, #12]
 8005786:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800578a:	d032      	beq.n	80057f2 <__ssputs_r+0x80>
 800578c:	6825      	ldr	r5, [r4, #0]
 800578e:	6909      	ldr	r1, [r1, #16]
 8005790:	3301      	adds	r3, #1
 8005792:	eba5 0901 	sub.w	r9, r5, r1
 8005796:	6965      	ldr	r5, [r4, #20]
 8005798:	444b      	add	r3, r9
 800579a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800579e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057a2:	106d      	asrs	r5, r5, #1
 80057a4:	429d      	cmp	r5, r3
 80057a6:	bf38      	it	cc
 80057a8:	461d      	movcc	r5, r3
 80057aa:	0553      	lsls	r3, r2, #21
 80057ac:	d531      	bpl.n	8005812 <__ssputs_r+0xa0>
 80057ae:	4629      	mov	r1, r5
 80057b0:	f000 fb52 	bl	8005e58 <_malloc_r>
 80057b4:	4606      	mov	r6, r0
 80057b6:	b950      	cbnz	r0, 80057ce <__ssputs_r+0x5c>
 80057b8:	230c      	movs	r3, #12
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	f8ca 3000 	str.w	r3, [sl]
 80057c2:	89a3      	ldrh	r3, [r4, #12]
 80057c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ce:	464a      	mov	r2, r9
 80057d0:	6921      	ldr	r1, [r4, #16]
 80057d2:	f000 facd 	bl	8005d70 <memcpy>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	6126      	str	r6, [r4, #16]
 80057e4:	444e      	add	r6, r9
 80057e6:	6026      	str	r6, [r4, #0]
 80057e8:	463e      	mov	r6, r7
 80057ea:	6165      	str	r5, [r4, #20]
 80057ec:	eba5 0509 	sub.w	r5, r5, r9
 80057f0:	60a5      	str	r5, [r4, #8]
 80057f2:	42be      	cmp	r6, r7
 80057f4:	d900      	bls.n	80057f8 <__ssputs_r+0x86>
 80057f6:	463e      	mov	r6, r7
 80057f8:	4632      	mov	r2, r6
 80057fa:	4641      	mov	r1, r8
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	f000 fac5 	bl	8005d8c <memmove>
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	1b9b      	subs	r3, r3, r6
 8005808:	4432      	add	r2, r6
 800580a:	2000      	movs	r0, #0
 800580c:	60a3      	str	r3, [r4, #8]
 800580e:	6022      	str	r2, [r4, #0]
 8005810:	e7db      	b.n	80057ca <__ssputs_r+0x58>
 8005812:	462a      	mov	r2, r5
 8005814:	f000 fb7a 	bl	8005f0c <_realloc_r>
 8005818:	4606      	mov	r6, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d1e1      	bne.n	80057e2 <__ssputs_r+0x70>
 800581e:	4650      	mov	r0, sl
 8005820:	6921      	ldr	r1, [r4, #16]
 8005822:	f000 facd 	bl	8005dc0 <_free_r>
 8005826:	e7c7      	b.n	80057b8 <__ssputs_r+0x46>

08005828 <_svfiprintf_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	4698      	mov	r8, r3
 800582e:	898b      	ldrh	r3, [r1, #12]
 8005830:	4607      	mov	r7, r0
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	460d      	mov	r5, r1
 8005836:	4614      	mov	r4, r2
 8005838:	b09d      	sub	sp, #116	; 0x74
 800583a:	d50e      	bpl.n	800585a <_svfiprintf_r+0x32>
 800583c:	690b      	ldr	r3, [r1, #16]
 800583e:	b963      	cbnz	r3, 800585a <_svfiprintf_r+0x32>
 8005840:	2140      	movs	r1, #64	; 0x40
 8005842:	f000 fb09 	bl	8005e58 <_malloc_r>
 8005846:	6028      	str	r0, [r5, #0]
 8005848:	6128      	str	r0, [r5, #16]
 800584a:	b920      	cbnz	r0, 8005856 <_svfiprintf_r+0x2e>
 800584c:	230c      	movs	r3, #12
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	e0d1      	b.n	80059fa <_svfiprintf_r+0x1d2>
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	616b      	str	r3, [r5, #20]
 800585a:	2300      	movs	r3, #0
 800585c:	9309      	str	r3, [sp, #36]	; 0x24
 800585e:	2320      	movs	r3, #32
 8005860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005864:	2330      	movs	r3, #48	; 0x30
 8005866:	f04f 0901 	mov.w	r9, #1
 800586a:	f8cd 800c 	str.w	r8, [sp, #12]
 800586e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a14 <_svfiprintf_r+0x1ec>
 8005872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005876:	4623      	mov	r3, r4
 8005878:	469a      	mov	sl, r3
 800587a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800587e:	b10a      	cbz	r2, 8005884 <_svfiprintf_r+0x5c>
 8005880:	2a25      	cmp	r2, #37	; 0x25
 8005882:	d1f9      	bne.n	8005878 <_svfiprintf_r+0x50>
 8005884:	ebba 0b04 	subs.w	fp, sl, r4
 8005888:	d00b      	beq.n	80058a2 <_svfiprintf_r+0x7a>
 800588a:	465b      	mov	r3, fp
 800588c:	4622      	mov	r2, r4
 800588e:	4629      	mov	r1, r5
 8005890:	4638      	mov	r0, r7
 8005892:	f7ff ff6e 	bl	8005772 <__ssputs_r>
 8005896:	3001      	adds	r0, #1
 8005898:	f000 80aa 	beq.w	80059f0 <_svfiprintf_r+0x1c8>
 800589c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800589e:	445a      	add	r2, fp
 80058a0:	9209      	str	r2, [sp, #36]	; 0x24
 80058a2:	f89a 3000 	ldrb.w	r3, [sl]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80a2 	beq.w	80059f0 <_svfiprintf_r+0x1c8>
 80058ac:	2300      	movs	r3, #0
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295
 80058b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058b6:	f10a 0a01 	add.w	sl, sl, #1
 80058ba:	9304      	str	r3, [sp, #16]
 80058bc:	9307      	str	r3, [sp, #28]
 80058be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058c2:	931a      	str	r3, [sp, #104]	; 0x68
 80058c4:	4654      	mov	r4, sl
 80058c6:	2205      	movs	r2, #5
 80058c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058cc:	4851      	ldr	r0, [pc, #324]	; (8005a14 <_svfiprintf_r+0x1ec>)
 80058ce:	f000 fa41 	bl	8005d54 <memchr>
 80058d2:	9a04      	ldr	r2, [sp, #16]
 80058d4:	b9d8      	cbnz	r0, 800590e <_svfiprintf_r+0xe6>
 80058d6:	06d0      	lsls	r0, r2, #27
 80058d8:	bf44      	itt	mi
 80058da:	2320      	movmi	r3, #32
 80058dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058e0:	0711      	lsls	r1, r2, #28
 80058e2:	bf44      	itt	mi
 80058e4:	232b      	movmi	r3, #43	; 0x2b
 80058e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ea:	f89a 3000 	ldrb.w	r3, [sl]
 80058ee:	2b2a      	cmp	r3, #42	; 0x2a
 80058f0:	d015      	beq.n	800591e <_svfiprintf_r+0xf6>
 80058f2:	4654      	mov	r4, sl
 80058f4:	2000      	movs	r0, #0
 80058f6:	f04f 0c0a 	mov.w	ip, #10
 80058fa:	9a07      	ldr	r2, [sp, #28]
 80058fc:	4621      	mov	r1, r4
 80058fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005902:	3b30      	subs	r3, #48	; 0x30
 8005904:	2b09      	cmp	r3, #9
 8005906:	d94e      	bls.n	80059a6 <_svfiprintf_r+0x17e>
 8005908:	b1b0      	cbz	r0, 8005938 <_svfiprintf_r+0x110>
 800590a:	9207      	str	r2, [sp, #28]
 800590c:	e014      	b.n	8005938 <_svfiprintf_r+0x110>
 800590e:	eba0 0308 	sub.w	r3, r0, r8
 8005912:	fa09 f303 	lsl.w	r3, r9, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	46a2      	mov	sl, r4
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	e7d2      	b.n	80058c4 <_svfiprintf_r+0x9c>
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	1d19      	adds	r1, r3, #4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	9103      	str	r1, [sp, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	bfbb      	ittet	lt
 800592a:	425b      	neglt	r3, r3
 800592c:	f042 0202 	orrlt.w	r2, r2, #2
 8005930:	9307      	strge	r3, [sp, #28]
 8005932:	9307      	strlt	r3, [sp, #28]
 8005934:	bfb8      	it	lt
 8005936:	9204      	strlt	r2, [sp, #16]
 8005938:	7823      	ldrb	r3, [r4, #0]
 800593a:	2b2e      	cmp	r3, #46	; 0x2e
 800593c:	d10c      	bne.n	8005958 <_svfiprintf_r+0x130>
 800593e:	7863      	ldrb	r3, [r4, #1]
 8005940:	2b2a      	cmp	r3, #42	; 0x2a
 8005942:	d135      	bne.n	80059b0 <_svfiprintf_r+0x188>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	3402      	adds	r4, #2
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	9203      	str	r2, [sp, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	bfb8      	it	lt
 8005952:	f04f 33ff 	movlt.w	r3, #4294967295
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a24 <_svfiprintf_r+0x1fc>
 800595c:	2203      	movs	r2, #3
 800595e:	4650      	mov	r0, sl
 8005960:	7821      	ldrb	r1, [r4, #0]
 8005962:	f000 f9f7 	bl	8005d54 <memchr>
 8005966:	b140      	cbz	r0, 800597a <_svfiprintf_r+0x152>
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	eba0 000a 	sub.w	r0, r0, sl
 800596e:	fa03 f000 	lsl.w	r0, r3, r0
 8005972:	9b04      	ldr	r3, [sp, #16]
 8005974:	3401      	adds	r4, #1
 8005976:	4303      	orrs	r3, r0
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597e:	2206      	movs	r2, #6
 8005980:	4825      	ldr	r0, [pc, #148]	; (8005a18 <_svfiprintf_r+0x1f0>)
 8005982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005986:	f000 f9e5 	bl	8005d54 <memchr>
 800598a:	2800      	cmp	r0, #0
 800598c:	d038      	beq.n	8005a00 <_svfiprintf_r+0x1d8>
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <_svfiprintf_r+0x1f4>)
 8005990:	bb1b      	cbnz	r3, 80059da <_svfiprintf_r+0x1b2>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	3307      	adds	r3, #7
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	3308      	adds	r3, #8
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	4433      	add	r3, r6
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	e767      	b.n	8005876 <_svfiprintf_r+0x4e>
 80059a6:	460c      	mov	r4, r1
 80059a8:	2001      	movs	r0, #1
 80059aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ae:	e7a5      	b.n	80058fc <_svfiprintf_r+0xd4>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f04f 0c0a 	mov.w	ip, #10
 80059b6:	4619      	mov	r1, r3
 80059b8:	3401      	adds	r4, #1
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	4620      	mov	r0, r4
 80059be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c2:	3a30      	subs	r2, #48	; 0x30
 80059c4:	2a09      	cmp	r2, #9
 80059c6:	d903      	bls.n	80059d0 <_svfiprintf_r+0x1a8>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0c5      	beq.n	8005958 <_svfiprintf_r+0x130>
 80059cc:	9105      	str	r1, [sp, #20]
 80059ce:	e7c3      	b.n	8005958 <_svfiprintf_r+0x130>
 80059d0:	4604      	mov	r4, r0
 80059d2:	2301      	movs	r3, #1
 80059d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d8:	e7f0      	b.n	80059bc <_svfiprintf_r+0x194>
 80059da:	ab03      	add	r3, sp, #12
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	462a      	mov	r2, r5
 80059e0:	4638      	mov	r0, r7
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <_svfiprintf_r+0x1f8>)
 80059e4:	a904      	add	r1, sp, #16
 80059e6:	f3af 8000 	nop.w
 80059ea:	1c42      	adds	r2, r0, #1
 80059ec:	4606      	mov	r6, r0
 80059ee:	d1d6      	bne.n	800599e <_svfiprintf_r+0x176>
 80059f0:	89ab      	ldrh	r3, [r5, #12]
 80059f2:	065b      	lsls	r3, r3, #25
 80059f4:	f53f af2c 	bmi.w	8005850 <_svfiprintf_r+0x28>
 80059f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059fa:	b01d      	add	sp, #116	; 0x74
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	ab03      	add	r3, sp, #12
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	462a      	mov	r2, r5
 8005a06:	4638      	mov	r0, r7
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <_svfiprintf_r+0x1f8>)
 8005a0a:	a904      	add	r1, sp, #16
 8005a0c:	f000 f87c 	bl	8005b08 <_printf_i>
 8005a10:	e7eb      	b.n	80059ea <_svfiprintf_r+0x1c2>
 8005a12:	bf00      	nop
 8005a14:	08006044 	.word	0x08006044
 8005a18:	0800604e 	.word	0x0800604e
 8005a1c:	00000000 	.word	0x00000000
 8005a20:	08005773 	.word	0x08005773
 8005a24:	0800604a 	.word	0x0800604a

08005a28 <_printf_common>:
 8005a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a2c:	4616      	mov	r6, r2
 8005a2e:	4699      	mov	r9, r3
 8005a30:	688a      	ldr	r2, [r1, #8]
 8005a32:	690b      	ldr	r3, [r1, #16]
 8005a34:	4607      	mov	r7, r0
 8005a36:	4293      	cmp	r3, r2
 8005a38:	bfb8      	it	lt
 8005a3a:	4613      	movlt	r3, r2
 8005a3c:	6033      	str	r3, [r6, #0]
 8005a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a42:	460c      	mov	r4, r1
 8005a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a48:	b10a      	cbz	r2, 8005a4e <_printf_common+0x26>
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	0699      	lsls	r1, r3, #26
 8005a52:	bf42      	ittt	mi
 8005a54:	6833      	ldrmi	r3, [r6, #0]
 8005a56:	3302      	addmi	r3, #2
 8005a58:	6033      	strmi	r3, [r6, #0]
 8005a5a:	6825      	ldr	r5, [r4, #0]
 8005a5c:	f015 0506 	ands.w	r5, r5, #6
 8005a60:	d106      	bne.n	8005a70 <_printf_common+0x48>
 8005a62:	f104 0a19 	add.w	sl, r4, #25
 8005a66:	68e3      	ldr	r3, [r4, #12]
 8005a68:	6832      	ldr	r2, [r6, #0]
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dc28      	bgt.n	8005ac2 <_printf_common+0x9a>
 8005a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a74:	1e13      	subs	r3, r2, #0
 8005a76:	6822      	ldr	r2, [r4, #0]
 8005a78:	bf18      	it	ne
 8005a7a:	2301      	movne	r3, #1
 8005a7c:	0692      	lsls	r2, r2, #26
 8005a7e:	d42d      	bmi.n	8005adc <_printf_common+0xb4>
 8005a80:	4649      	mov	r1, r9
 8005a82:	4638      	mov	r0, r7
 8005a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a88:	47c0      	blx	r8
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d020      	beq.n	8005ad0 <_printf_common+0xa8>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	68e5      	ldr	r5, [r4, #12]
 8005a92:	f003 0306 	and.w	r3, r3, #6
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	bf18      	it	ne
 8005a9a:	2500      	movne	r5, #0
 8005a9c:	6832      	ldr	r2, [r6, #0]
 8005a9e:	f04f 0600 	mov.w	r6, #0
 8005aa2:	68a3      	ldr	r3, [r4, #8]
 8005aa4:	bf08      	it	eq
 8005aa6:	1aad      	subeq	r5, r5, r2
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	bf08      	it	eq
 8005aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	bfc4      	itt	gt
 8005ab4:	1a9b      	subgt	r3, r3, r2
 8005ab6:	18ed      	addgt	r5, r5, r3
 8005ab8:	341a      	adds	r4, #26
 8005aba:	42b5      	cmp	r5, r6
 8005abc:	d11a      	bne.n	8005af4 <_printf_common+0xcc>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e008      	b.n	8005ad4 <_printf_common+0xac>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4638      	mov	r0, r7
 8005aca:	47c0      	blx	r8
 8005acc:	3001      	adds	r0, #1
 8005ace:	d103      	bne.n	8005ad8 <_printf_common+0xb0>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad8:	3501      	adds	r5, #1
 8005ada:	e7c4      	b.n	8005a66 <_printf_common+0x3e>
 8005adc:	2030      	movs	r0, #48	; 0x30
 8005ade:	18e1      	adds	r1, r4, r3
 8005ae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005aea:	4422      	add	r2, r4
 8005aec:	3302      	adds	r3, #2
 8005aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005af2:	e7c5      	b.n	8005a80 <_printf_common+0x58>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4622      	mov	r2, r4
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d0e6      	beq.n	8005ad0 <_printf_common+0xa8>
 8005b02:	3601      	adds	r6, #1
 8005b04:	e7d9      	b.n	8005aba <_printf_common+0x92>
	...

08005b08 <_printf_i>:
 8005b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	7e27      	ldrb	r7, [r4, #24]
 8005b10:	4691      	mov	r9, r2
 8005b12:	2f78      	cmp	r7, #120	; 0x78
 8005b14:	4680      	mov	r8, r0
 8005b16:	469a      	mov	sl, r3
 8005b18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b1e:	d807      	bhi.n	8005b30 <_printf_i+0x28>
 8005b20:	2f62      	cmp	r7, #98	; 0x62
 8005b22:	d80a      	bhi.n	8005b3a <_printf_i+0x32>
 8005b24:	2f00      	cmp	r7, #0
 8005b26:	f000 80d9 	beq.w	8005cdc <_printf_i+0x1d4>
 8005b2a:	2f58      	cmp	r7, #88	; 0x58
 8005b2c:	f000 80a4 	beq.w	8005c78 <_printf_i+0x170>
 8005b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b38:	e03a      	b.n	8005bb0 <_printf_i+0xa8>
 8005b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b3e:	2b15      	cmp	r3, #21
 8005b40:	d8f6      	bhi.n	8005b30 <_printf_i+0x28>
 8005b42:	a001      	add	r0, pc, #4	; (adr r0, 8005b48 <_printf_i+0x40>)
 8005b44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005bb5 	.word	0x08005bb5
 8005b50:	08005b31 	.word	0x08005b31
 8005b54:	08005b31 	.word	0x08005b31
 8005b58:	08005b31 	.word	0x08005b31
 8005b5c:	08005b31 	.word	0x08005b31
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005b31 	.word	0x08005b31
 8005b68:	08005b31 	.word	0x08005b31
 8005b6c:	08005b31 	.word	0x08005b31
 8005b70:	08005b31 	.word	0x08005b31
 8005b74:	08005cc3 	.word	0x08005cc3
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005ca5 	.word	0x08005ca5
 8005b80:	08005b31 	.word	0x08005b31
 8005b84:	08005b31 	.word	0x08005b31
 8005b88:	08005ce5 	.word	0x08005ce5
 8005b8c:	08005b31 	.word	0x08005b31
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005b31 	.word	0x08005b31
 8005b98:	08005b31 	.word	0x08005b31
 8005b9c:	08005cad 	.word	0x08005cad
 8005ba0:	680b      	ldr	r3, [r1, #0]
 8005ba2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ba6:	1d1a      	adds	r2, r3, #4
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	600a      	str	r2, [r1, #0]
 8005bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0a4      	b.n	8005cfe <_printf_i+0x1f6>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	6808      	ldr	r0, [r1, #0]
 8005bb8:	062e      	lsls	r6, r5, #24
 8005bba:	f100 0304 	add.w	r3, r0, #4
 8005bbe:	d50a      	bpl.n	8005bd6 <_printf_i+0xce>
 8005bc0:	6805      	ldr	r5, [r0, #0]
 8005bc2:	600b      	str	r3, [r1, #0]
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	da03      	bge.n	8005bd0 <_printf_i+0xc8>
 8005bc8:	232d      	movs	r3, #45	; 0x2d
 8005bca:	426d      	negs	r5, r5
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bd0:	230a      	movs	r3, #10
 8005bd2:	485e      	ldr	r0, [pc, #376]	; (8005d4c <_printf_i+0x244>)
 8005bd4:	e019      	b.n	8005c0a <_printf_i+0x102>
 8005bd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005bda:	6805      	ldr	r5, [r0, #0]
 8005bdc:	600b      	str	r3, [r1, #0]
 8005bde:	bf18      	it	ne
 8005be0:	b22d      	sxthne	r5, r5
 8005be2:	e7ef      	b.n	8005bc4 <_printf_i+0xbc>
 8005be4:	680b      	ldr	r3, [r1, #0]
 8005be6:	6825      	ldr	r5, [r4, #0]
 8005be8:	1d18      	adds	r0, r3, #4
 8005bea:	6008      	str	r0, [r1, #0]
 8005bec:	0628      	lsls	r0, r5, #24
 8005bee:	d501      	bpl.n	8005bf4 <_printf_i+0xec>
 8005bf0:	681d      	ldr	r5, [r3, #0]
 8005bf2:	e002      	b.n	8005bfa <_printf_i+0xf2>
 8005bf4:	0669      	lsls	r1, r5, #25
 8005bf6:	d5fb      	bpl.n	8005bf0 <_printf_i+0xe8>
 8005bf8:	881d      	ldrh	r5, [r3, #0]
 8005bfa:	2f6f      	cmp	r7, #111	; 0x6f
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2308      	moveq	r3, #8
 8005c00:	230a      	movne	r3, #10
 8005c02:	4852      	ldr	r0, [pc, #328]	; (8005d4c <_printf_i+0x244>)
 8005c04:	2100      	movs	r1, #0
 8005c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c0a:	6866      	ldr	r6, [r4, #4]
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	bfa8      	it	ge
 8005c10:	6821      	ldrge	r1, [r4, #0]
 8005c12:	60a6      	str	r6, [r4, #8]
 8005c14:	bfa4      	itt	ge
 8005c16:	f021 0104 	bicge.w	r1, r1, #4
 8005c1a:	6021      	strge	r1, [r4, #0]
 8005c1c:	b90d      	cbnz	r5, 8005c22 <_printf_i+0x11a>
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	d04d      	beq.n	8005cbe <_printf_i+0x1b6>
 8005c22:	4616      	mov	r6, r2
 8005c24:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c28:	fb03 5711 	mls	r7, r3, r1, r5
 8005c2c:	5dc7      	ldrb	r7, [r0, r7]
 8005c2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c32:	462f      	mov	r7, r5
 8005c34:	42bb      	cmp	r3, r7
 8005c36:	460d      	mov	r5, r1
 8005c38:	d9f4      	bls.n	8005c24 <_printf_i+0x11c>
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d10b      	bne.n	8005c56 <_printf_i+0x14e>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	07df      	lsls	r7, r3, #31
 8005c42:	d508      	bpl.n	8005c56 <_printf_i+0x14e>
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	6861      	ldr	r1, [r4, #4]
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	bfde      	ittt	le
 8005c4c:	2330      	movle	r3, #48	; 0x30
 8005c4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c56:	1b92      	subs	r2, r2, r6
 8005c58:	6122      	str	r2, [r4, #16]
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f8cd a000 	str.w	sl, [sp]
 8005c64:	aa03      	add	r2, sp, #12
 8005c66:	f7ff fedf 	bl	8005a28 <_printf_common>
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d14c      	bne.n	8005d08 <_printf_i+0x200>
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	b004      	add	sp, #16
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	4834      	ldr	r0, [pc, #208]	; (8005d4c <_printf_i+0x244>)
 8005c7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c7e:	680e      	ldr	r6, [r1, #0]
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c86:	061f      	lsls	r7, r3, #24
 8005c88:	600e      	str	r6, [r1, #0]
 8005c8a:	d514      	bpl.n	8005cb6 <_printf_i+0x1ae>
 8005c8c:	07d9      	lsls	r1, r3, #31
 8005c8e:	bf44      	itt	mi
 8005c90:	f043 0320 	orrmi.w	r3, r3, #32
 8005c94:	6023      	strmi	r3, [r4, #0]
 8005c96:	b91d      	cbnz	r5, 8005ca0 <_printf_i+0x198>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	f023 0320 	bic.w	r3, r3, #32
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	e7af      	b.n	8005c04 <_printf_i+0xfc>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f043 0320 	orr.w	r3, r3, #32
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	2378      	movs	r3, #120	; 0x78
 8005cae:	4828      	ldr	r0, [pc, #160]	; (8005d50 <_printf_i+0x248>)
 8005cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cb4:	e7e3      	b.n	8005c7e <_printf_i+0x176>
 8005cb6:	065e      	lsls	r6, r3, #25
 8005cb8:	bf48      	it	mi
 8005cba:	b2ad      	uxthmi	r5, r5
 8005cbc:	e7e6      	b.n	8005c8c <_printf_i+0x184>
 8005cbe:	4616      	mov	r6, r2
 8005cc0:	e7bb      	b.n	8005c3a <_printf_i+0x132>
 8005cc2:	680b      	ldr	r3, [r1, #0]
 8005cc4:	6826      	ldr	r6, [r4, #0]
 8005cc6:	1d1d      	adds	r5, r3, #4
 8005cc8:	6960      	ldr	r0, [r4, #20]
 8005cca:	600d      	str	r5, [r1, #0]
 8005ccc:	0635      	lsls	r5, r6, #24
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_i+0x1ce>
 8005cd2:	6018      	str	r0, [r3, #0]
 8005cd4:	e002      	b.n	8005cdc <_printf_i+0x1d4>
 8005cd6:	0671      	lsls	r1, r6, #25
 8005cd8:	d5fb      	bpl.n	8005cd2 <_printf_i+0x1ca>
 8005cda:	8018      	strh	r0, [r3, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4616      	mov	r6, r2
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	e7ba      	b.n	8005c5a <_printf_i+0x152>
 8005ce4:	680b      	ldr	r3, [r1, #0]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	600a      	str	r2, [r1, #0]
 8005cea:	681e      	ldr	r6, [r3, #0]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4630      	mov	r0, r6
 8005cf0:	6862      	ldr	r2, [r4, #4]
 8005cf2:	f000 f82f 	bl	8005d54 <memchr>
 8005cf6:	b108      	cbz	r0, 8005cfc <_printf_i+0x1f4>
 8005cf8:	1b80      	subs	r0, r0, r6
 8005cfa:	6060      	str	r0, [r4, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2300      	movs	r3, #0
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d06:	e7a8      	b.n	8005c5a <_printf_i+0x152>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	47d0      	blx	sl
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0ab      	beq.n	8005c6e <_printf_i+0x166>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	079b      	lsls	r3, r3, #30
 8005d1a:	d413      	bmi.n	8005d44 <_printf_i+0x23c>
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	4298      	cmp	r0, r3
 8005d22:	bfb8      	it	lt
 8005d24:	4618      	movlt	r0, r3
 8005d26:	e7a4      	b.n	8005c72 <_printf_i+0x16a>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4640      	mov	r0, r8
 8005d30:	47d0      	blx	sl
 8005d32:	3001      	adds	r0, #1
 8005d34:	d09b      	beq.n	8005c6e <_printf_i+0x166>
 8005d36:	3501      	adds	r5, #1
 8005d38:	68e3      	ldr	r3, [r4, #12]
 8005d3a:	9903      	ldr	r1, [sp, #12]
 8005d3c:	1a5b      	subs	r3, r3, r1
 8005d3e:	42ab      	cmp	r3, r5
 8005d40:	dcf2      	bgt.n	8005d28 <_printf_i+0x220>
 8005d42:	e7eb      	b.n	8005d1c <_printf_i+0x214>
 8005d44:	2500      	movs	r5, #0
 8005d46:	f104 0619 	add.w	r6, r4, #25
 8005d4a:	e7f5      	b.n	8005d38 <_printf_i+0x230>
 8005d4c:	08006055 	.word	0x08006055
 8005d50:	08006066 	.word	0x08006066

08005d54 <memchr>:
 8005d54:	4603      	mov	r3, r0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	b2c9      	uxtb	r1, r1
 8005d5a:	4402      	add	r2, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	d101      	bne.n	8005d66 <memchr+0x12>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e003      	b.n	8005d6e <memchr+0x1a>
 8005d66:	7804      	ldrb	r4, [r0, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	428c      	cmp	r4, r1
 8005d6c:	d1f6      	bne.n	8005d5c <memchr+0x8>
 8005d6e:	bd10      	pop	{r4, pc}

08005d70 <memcpy>:
 8005d70:	440a      	add	r2, r1
 8005d72:	4291      	cmp	r1, r2
 8005d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d78:	d100      	bne.n	8005d7c <memcpy+0xc>
 8005d7a:	4770      	bx	lr
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d82:	4291      	cmp	r1, r2
 8005d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d88:	d1f9      	bne.n	8005d7e <memcpy+0xe>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <memmove>:
 8005d8c:	4288      	cmp	r0, r1
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	eb01 0402 	add.w	r4, r1, r2
 8005d94:	d902      	bls.n	8005d9c <memmove+0x10>
 8005d96:	4284      	cmp	r4, r0
 8005d98:	4623      	mov	r3, r4
 8005d9a:	d807      	bhi.n	8005dac <memmove+0x20>
 8005d9c:	1e43      	subs	r3, r0, #1
 8005d9e:	42a1      	cmp	r1, r4
 8005da0:	d008      	beq.n	8005db4 <memmove+0x28>
 8005da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005daa:	e7f8      	b.n	8005d9e <memmove+0x12>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4402      	add	r2, r0
 8005db0:	428a      	cmp	r2, r1
 8005db2:	d100      	bne.n	8005db6 <memmove+0x2a>
 8005db4:	bd10      	pop	{r4, pc}
 8005db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dbe:	e7f7      	b.n	8005db0 <memmove+0x24>

08005dc0 <_free_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	d043      	beq.n	8005e50 <_free_r+0x90>
 8005dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dcc:	1f0c      	subs	r4, r1, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfb8      	it	lt
 8005dd2:	18e4      	addlt	r4, r4, r3
 8005dd4:	f000 f8d0 	bl	8005f78 <__malloc_lock>
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <_free_r+0x94>)
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	4610      	mov	r0, r2
 8005dde:	b933      	cbnz	r3, 8005dee <_free_r+0x2e>
 8005de0:	6063      	str	r3, [r4, #4]
 8005de2:	6014      	str	r4, [r2, #0]
 8005de4:	4628      	mov	r0, r5
 8005de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dea:	f000 b8cb 	b.w	8005f84 <__malloc_unlock>
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	d90a      	bls.n	8005e08 <_free_r+0x48>
 8005df2:	6821      	ldr	r1, [r4, #0]
 8005df4:	1862      	adds	r2, r4, r1
 8005df6:	4293      	cmp	r3, r2
 8005df8:	bf01      	itttt	eq
 8005dfa:	681a      	ldreq	r2, [r3, #0]
 8005dfc:	685b      	ldreq	r3, [r3, #4]
 8005dfe:	1852      	addeq	r2, r2, r1
 8005e00:	6022      	streq	r2, [r4, #0]
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	6004      	str	r4, [r0, #0]
 8005e06:	e7ed      	b.n	8005de4 <_free_r+0x24>
 8005e08:	461a      	mov	r2, r3
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	b10b      	cbz	r3, 8005e12 <_free_r+0x52>
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d9fa      	bls.n	8005e08 <_free_r+0x48>
 8005e12:	6811      	ldr	r1, [r2, #0]
 8005e14:	1850      	adds	r0, r2, r1
 8005e16:	42a0      	cmp	r0, r4
 8005e18:	d10b      	bne.n	8005e32 <_free_r+0x72>
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	4401      	add	r1, r0
 8005e1e:	1850      	adds	r0, r2, r1
 8005e20:	4283      	cmp	r3, r0
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	d1de      	bne.n	8005de4 <_free_r+0x24>
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	4401      	add	r1, r0
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	6053      	str	r3, [r2, #4]
 8005e30:	e7d8      	b.n	8005de4 <_free_r+0x24>
 8005e32:	d902      	bls.n	8005e3a <_free_r+0x7a>
 8005e34:	230c      	movs	r3, #12
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	e7d4      	b.n	8005de4 <_free_r+0x24>
 8005e3a:	6820      	ldr	r0, [r4, #0]
 8005e3c:	1821      	adds	r1, r4, r0
 8005e3e:	428b      	cmp	r3, r1
 8005e40:	bf01      	itttt	eq
 8005e42:	6819      	ldreq	r1, [r3, #0]
 8005e44:	685b      	ldreq	r3, [r3, #4]
 8005e46:	1809      	addeq	r1, r1, r0
 8005e48:	6021      	streq	r1, [r4, #0]
 8005e4a:	6063      	str	r3, [r4, #4]
 8005e4c:	6054      	str	r4, [r2, #4]
 8005e4e:	e7c9      	b.n	8005de4 <_free_r+0x24>
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	bf00      	nop
 8005e54:	20000340 	.word	0x20000340

08005e58 <_malloc_r>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	1ccd      	adds	r5, r1, #3
 8005e5c:	f025 0503 	bic.w	r5, r5, #3
 8005e60:	3508      	adds	r5, #8
 8005e62:	2d0c      	cmp	r5, #12
 8005e64:	bf38      	it	cc
 8005e66:	250c      	movcc	r5, #12
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	db01      	blt.n	8005e72 <_malloc_r+0x1a>
 8005e6e:	42a9      	cmp	r1, r5
 8005e70:	d903      	bls.n	8005e7a <_malloc_r+0x22>
 8005e72:	230c      	movs	r3, #12
 8005e74:	6033      	str	r3, [r6, #0]
 8005e76:	2000      	movs	r0, #0
 8005e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e7a:	f000 f87d 	bl	8005f78 <__malloc_lock>
 8005e7e:	4921      	ldr	r1, [pc, #132]	; (8005f04 <_malloc_r+0xac>)
 8005e80:	680a      	ldr	r2, [r1, #0]
 8005e82:	4614      	mov	r4, r2
 8005e84:	b99c      	cbnz	r4, 8005eae <_malloc_r+0x56>
 8005e86:	4f20      	ldr	r7, [pc, #128]	; (8005f08 <_malloc_r+0xb0>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	b923      	cbnz	r3, 8005e96 <_malloc_r+0x3e>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f000 f862 	bl	8005f58 <_sbrk_r>
 8005e94:	6038      	str	r0, [r7, #0]
 8005e96:	4629      	mov	r1, r5
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f000 f85d 	bl	8005f58 <_sbrk_r>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d123      	bne.n	8005eea <_malloc_r+0x92>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	6033      	str	r3, [r6, #0]
 8005ea8:	f000 f86c 	bl	8005f84 <__malloc_unlock>
 8005eac:	e7e3      	b.n	8005e76 <_malloc_r+0x1e>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	1b5b      	subs	r3, r3, r5
 8005eb2:	d417      	bmi.n	8005ee4 <_malloc_r+0x8c>
 8005eb4:	2b0b      	cmp	r3, #11
 8005eb6:	d903      	bls.n	8005ec0 <_malloc_r+0x68>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	441c      	add	r4, r3
 8005ebc:	6025      	str	r5, [r4, #0]
 8005ebe:	e004      	b.n	8005eca <_malloc_r+0x72>
 8005ec0:	6863      	ldr	r3, [r4, #4]
 8005ec2:	42a2      	cmp	r2, r4
 8005ec4:	bf0c      	ite	eq
 8005ec6:	600b      	streq	r3, [r1, #0]
 8005ec8:	6053      	strne	r3, [r2, #4]
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f000 f85a 	bl	8005f84 <__malloc_unlock>
 8005ed0:	f104 000b 	add.w	r0, r4, #11
 8005ed4:	1d23      	adds	r3, r4, #4
 8005ed6:	f020 0007 	bic.w	r0, r0, #7
 8005eda:	1ac2      	subs	r2, r0, r3
 8005edc:	d0cc      	beq.n	8005e78 <_malloc_r+0x20>
 8005ede:	1a1b      	subs	r3, r3, r0
 8005ee0:	50a3      	str	r3, [r4, r2]
 8005ee2:	e7c9      	b.n	8005e78 <_malloc_r+0x20>
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	6864      	ldr	r4, [r4, #4]
 8005ee8:	e7cc      	b.n	8005e84 <_malloc_r+0x2c>
 8005eea:	1cc4      	adds	r4, r0, #3
 8005eec:	f024 0403 	bic.w	r4, r4, #3
 8005ef0:	42a0      	cmp	r0, r4
 8005ef2:	d0e3      	beq.n	8005ebc <_malloc_r+0x64>
 8005ef4:	1a21      	subs	r1, r4, r0
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f000 f82e 	bl	8005f58 <_sbrk_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d1dd      	bne.n	8005ebc <_malloc_r+0x64>
 8005f00:	e7cf      	b.n	8005ea2 <_malloc_r+0x4a>
 8005f02:	bf00      	nop
 8005f04:	20000340 	.word	0x20000340
 8005f08:	20000344 	.word	0x20000344

08005f0c <_realloc_r>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	4607      	mov	r7, r0
 8005f10:	4614      	mov	r4, r2
 8005f12:	460e      	mov	r6, r1
 8005f14:	b921      	cbnz	r1, 8005f20 <_realloc_r+0x14>
 8005f16:	4611      	mov	r1, r2
 8005f18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f1c:	f7ff bf9c 	b.w	8005e58 <_malloc_r>
 8005f20:	b922      	cbnz	r2, 8005f2c <_realloc_r+0x20>
 8005f22:	f7ff ff4d 	bl	8005dc0 <_free_r>
 8005f26:	4625      	mov	r5, r4
 8005f28:	4628      	mov	r0, r5
 8005f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2c:	f000 f830 	bl	8005f90 <_malloc_usable_size_r>
 8005f30:	42a0      	cmp	r0, r4
 8005f32:	d20f      	bcs.n	8005f54 <_realloc_r+0x48>
 8005f34:	4621      	mov	r1, r4
 8005f36:	4638      	mov	r0, r7
 8005f38:	f7ff ff8e 	bl	8005e58 <_malloc_r>
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0f2      	beq.n	8005f28 <_realloc_r+0x1c>
 8005f42:	4631      	mov	r1, r6
 8005f44:	4622      	mov	r2, r4
 8005f46:	f7ff ff13 	bl	8005d70 <memcpy>
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f7ff ff37 	bl	8005dc0 <_free_r>
 8005f52:	e7e9      	b.n	8005f28 <_realloc_r+0x1c>
 8005f54:	4635      	mov	r5, r6
 8005f56:	e7e7      	b.n	8005f28 <_realloc_r+0x1c>

08005f58 <_sbrk_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	4d05      	ldr	r5, [pc, #20]	; (8005f74 <_sbrk_r+0x1c>)
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fd f822 	bl	8002fac <_sbrk>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_sbrk_r+0x1a>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_sbrk_r+0x1a>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	200003dc 	.word	0x200003dc

08005f78 <__malloc_lock>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__malloc_lock+0x8>)
 8005f7a:	f000 b811 	b.w	8005fa0 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	200003e4 	.word	0x200003e4

08005f84 <__malloc_unlock>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__malloc_unlock+0x8>)
 8005f86:	f000 b80c 	b.w	8005fa2 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200003e4 	.word	0x200003e4

08005f90 <_malloc_usable_size_r>:
 8005f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f94:	1f18      	subs	r0, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bfbc      	itt	lt
 8005f9a:	580b      	ldrlt	r3, [r1, r0]
 8005f9c:	18c0      	addlt	r0, r0, r3
 8005f9e:	4770      	bx	lr

08005fa0 <__retarget_lock_acquire_recursive>:
 8005fa0:	4770      	bx	lr

08005fa2 <__retarget_lock_release_recursive>:
 8005fa2:	4770      	bx	lr

08005fa4 <_init>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr

08005fb0 <_fini>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr
