
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000168c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e4  080017e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017ec  080017ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080017f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001800  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001800  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034cd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f4e  00000000  00000000  00023502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00024450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00024880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b97  00000000  00000000  00024c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049c8  00000000  00000000  000387bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b358  00000000  00000000  0003d187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b84df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f38  00000000  00000000  000b8534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080017b0 	.word	0x080017b0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080017b0 	.word	0x080017b0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <flash_read_int>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
uint32_t flash_read_int(uint32_t address)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	uint32_t *val = (uint32_t*) address;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	60fb      	str	r3, [r7, #12]
	return *val;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	681b      	ldr	r3, [r3, #0]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
	...

08000490 <flash_erase>:
void flash_erase(uint32_t pageAddress)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 8000498:	bf00      	nop
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <flash_erase+0x6c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d0f9      	beq.n	800049a <flash_erase+0xa>
	FLASH->PECR |= FLASH_PECR_ERASE;
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <flash_erase+0x6c>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <flash_erase+0x6c>)
 80004ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b0:	6053      	str	r3, [r2, #4]
	FLASH->PECR |= FLASH_PECR_PROG;
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <flash_erase+0x6c>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <flash_erase+0x6c>)
 80004b8:	f043 0308 	orr.w	r3, r3, #8
 80004bc:	6053      	str	r3, [r2, #4]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 80004be:	bf00      	nop
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <flash_erase+0x6c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0301 	and.w	r3, r3, #1
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d0f9      	beq.n	80004c0 <flash_erase+0x30>
	*(__IO uint32_t*) (uint32_t) (pageAddress & ~(FLASH_PAGE_SIZE - 1)) =
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80004d2:	461a      	mov	r2, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	6013      	str	r3, [r2, #0]
			0x00000000;
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <flash_erase+0x6c>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a07      	ldr	r2, [pc, #28]	; (80004fc <flash_erase+0x6c>)
 80004de:	f023 0308 	bic.w	r3, r3, #8
 80004e2:	6053      	str	r3, [r2, #4]
	CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <flash_erase+0x6c>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <flash_erase+0x6c>)
 80004ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004ee:	6053      	str	r3, [r2, #4]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40023c00 	.word	0x40023c00

08000500 <flash_write_int>:
void flash_write_int(uint32_t address, int32_t iData)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));    //quá trình ghi dữ liệu, tương ứng trong hàm HAL_FLASH_Program
 800050a:	bf00      	nop
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <flash_write_int+0x38>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b01      	cmp	r3, #1
 8000516:	d0f9      	beq.n	800050c <flash_write_int+0xc>
	*(__IO uint32_t*) address = iData;    //dữ liệu ở đây là HALFWORD, WORD là uint32_t
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	601a      	str	r2, [r3, #0]
	while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY));
 800051e:	bf00      	nop
 8000520:	4b05      	ldr	r3, [pc, #20]	; (8000538 <flash_write_int+0x38>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b01      	cmp	r3, #1
 800052a:	d0f9      	beq.n	8000520 <flash_write_int+0x20>
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40023c00 	.word	0x40023c00

0800053c <fota_goto_firmware>:
void fota_goto_firmware(uint32_t address)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	HAL_RCC_DeInit();    //Tắt hết ngoại vi xoá hết c�? ngắt
 8000544:	f000 fb14 	bl	8000b70 <HAL_RCC_DeInit>

	HAL_DeInit();			//Xoá hết các Pending, đồng th�?i tắt System Tick
 8000548:	f000 f96a 	bl	8000820 <HAL_DeInit>

	SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <fota_goto_firmware+0x44>)
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <fota_goto_firmware+0x44>)
 8000552:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8000556:	6253      	str	r3, [r2, #36]	; 0x24
	SCB_SHCSR_BUSFAULTENA_Msk |
	SCB_SHCSR_MEMFAULTENA_Msk);

	__set_MSP(*((__IO uint32_t*) address));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f383 8808 	msr	MSP, r3
}
 8000564:	bf00      	nop

	uint32_t jump_address = *((__IO uint32_t*) (address + 4));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	617b      	str	r3, [r7, #20]
	void (*reset_handler)(void) = (void*) jump_address;
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	613b      	str	r3, [r7, #16]
	reset_handler();
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	4798      	blx	r3
}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058a:	f000 f930 	bl	80007ee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058e:	f000 f849 	bl	8000624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000592:	f000 f88f 	bl	80006b4 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	uint32_t firmware_address_to_jump = flash_read_int(
 8000596:	481b      	ldr	r0, [pc, #108]	; (8000604 <main+0x80>)
 8000598:	f7ff ff6c 	bl	8000474 <flash_read_int>
 800059c:	6078      	str	r0, [r7, #4]
	FOTA_CURRENT_ADDRESS);
	/* Ở lần chạy đầu tiên, chưa có gì trong flash nên cần phải cài đặt địa chỉ
	 * cho lần chạy đầu tiên là địa chỉ bắt đầu của vùng nhớ thứ nhất.
	 */
	if (firmware_address_to_jump == 0x00000000)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d120      	bne.n	80005e6 <main+0x62>
	{
		firmware_address_to_jump = FOTA_APP1_START_ADDRESS;
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0x84>)
 80005a6:	607b      	str	r3, [r7, #4]
		HAL_FLASH_Unlock();
 80005a8:	f000 fa98 	bl	8000adc <HAL_FLASH_Unlock>
		flash_erase(FOTA_FLAG_NEED_UPDATE);
 80005ac:	4817      	ldr	r0, [pc, #92]	; (800060c <main+0x88>)
 80005ae:	f7ff ff6f 	bl	8000490 <flash_erase>
		flash_write_int(FOTA_CURRENT_ADDRESS, firmware_address_to_jump);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4619      	mov	r1, r3
 80005b6:	4813      	ldr	r0, [pc, #76]	; (8000604 <main+0x80>)
 80005b8:	f7ff ffa2 	bl	8000500 <flash_write_int>
		flash_write_int(FOTA_CURRENT_VER_MAJOR_ADDRESS, 0x00);
 80005bc:	2100      	movs	r1, #0
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x8c>)
 80005c0:	f7ff ff9e 	bl	8000500 <flash_write_int>
		flash_write_int(FOTA_CURRENT_VER_MINOR_ADDRESS, 0x00);
 80005c4:	2100      	movs	r1, #0
 80005c6:	4813      	ldr	r0, [pc, #76]	; (8000614 <main+0x90>)
 80005c8:	f7ff ff9a 	bl	8000500 <flash_write_int>
		flash_write_int(FOTA_CURRENT_VER_PATCH_ADDRESS, 0x00);
 80005cc:	2100      	movs	r1, #0
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x94>)
 80005d0:	f7ff ff96 	bl	8000500 <flash_write_int>
		flash_erase(FOTA_STATE_UPDATE);
 80005d4:	4811      	ldr	r0, [pc, #68]	; (800061c <main+0x98>)
 80005d6:	f7ff ff5b 	bl	8000490 <flash_erase>
		flash_write_int(FOTA_STATE_UPDATE, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	480f      	ldr	r0, [pc, #60]	; (800061c <main+0x98>)
 80005de:	f7ff ff8f 	bl	8000500 <flash_write_int>
		HAL_FLASH_Lock();
 80005e2:	f000 fab5 	bl	8000b50 <HAL_FLASH_Lock>
	}
	/* Nếu có cờ yêu cầu cập nhật thì nhảy đến địa chỉ của chương trình OTA
	 * Nếu không có thì nhảy đến địa chỉ đọc được từ bộ nhớ flash hoặc là
	 * địa chỉ vùng 1 ở lần chạy đầu tiên.
	 */
	uint8_t flag_need_update_fw = flash_read_int(FOTA_FLAG_NEED_UPDATE);
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x88>)
 80005e8:	f7ff ff44 	bl	8000474 <flash_read_int>
 80005ec:	4603      	mov	r3, r0
 80005ee:	70fb      	strb	r3, [r7, #3]
	if (flag_need_update_fw == 0x00000001)
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d101      	bne.n	80005fa <main+0x76>
	{
		firmware_address_to_jump = FOTA_OTA_START_ADDRESS;
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0x9c>)
 80005f8:	607b      	str	r3, [r7, #4]
	}

	fota_goto_firmware(firmware_address_to_jump);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ff9e 	bl	800053c <fota_goto_firmware>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x7c>
 8000602:	bf00      	nop
 8000604:	0803fc04 	.word	0x0803fc04
 8000608:	08007800 	.word	0x08007800
 800060c:	0803fc00 	.word	0x0803fc00
 8000610:	0803fc08 	.word	0x0803fc08
 8000614:	0803fc0c 	.word	0x0803fc0c
 8000618:	0803fc10 	.word	0x0803fc10
 800061c:	0803fd00 	.word	0x0803fd00
 8000620:	08002000 	.word	0x08002000

08000624 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b092      	sub	sp, #72	; 0x48
 8000628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2234      	movs	r2, #52	; 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f8b4 	bl	80017a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <SystemClock_Config+0x8c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <SystemClock_Config+0x8c>)
 8000650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000654:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000656:	2310      	movs	r3, #16
 8000658:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000662:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fb07 	bl	8000c84 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x5c>
	{
		Error_Handler();
 800067c:	f000 f830 	bl	80006e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fe23 	bl	80012e4 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x84>
	{
		Error_Handler();
 80006a4:	f000 f81c 	bl	80006e0 <Error_Handler>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3748      	adds	r7, #72	; 0x48
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_GPIO_Init+0x28>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <MX_GPIO_Init+0x28>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_GPIO_Init+0x28>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800

080006e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_MspInit+0x58>)
 80006f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <HAL_MspInit+0x58>)
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	6253      	str	r3, [r2, #36]	; 0x24
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_MspInit+0x58>)
 8000700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_MspInit+0x58>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <HAL_MspInit+0x58>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6213      	str	r3, [r2, #32]
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <HAL_MspInit+0x58>)
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_MspInit+0x58>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_MspInit+0x58>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6253      	str	r3, [r2, #36]	; 0x24
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_MspInit+0x58>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	e7fe      	b.n	800074c <NMI_Handler+0x4>

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <MemManage_Handler+0x4>

0800075a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <UsageFault_Handler+0x4>

08000766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078e:	f000 f8a5 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}

08000796 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ca:	f7ff ffe4 	bl	8000796 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f000 ffc3 	bl	8001758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fed7 	bl	8000584 <main>
  bx lr
 80007d6:	4770      	bx	lr
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	080017f4 	.word	0x080017f4
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	2000002c 	.word	0x2000002c

080007ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_IRQHandler>

080007ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f93b 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f832 	bl	8000868 <HAL_InitTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	e001      	b.n	8000814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000810:	f7ff ff6c 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000814:	79fb      	ldrb	r3, [r7, #7]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_DeInit+0x38>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_APB1_RELEASE_RESET();
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_DeInit+0x38>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]

  __HAL_RCC_APB2_FORCE_RESET();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_DeInit+0x38>)
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	615a      	str	r2, [r3, #20]
  __HAL_RCC_APB2_RELEASE_RESET();
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <HAL_DeInit+0x38>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB_FORCE_RESET();
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_DeInit+0x38>)
 8000842:	f04f 32ff 	mov.w	r2, #4294967295
 8000846:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB_RELEASE_RESET();
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_DeInit+0x38>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800084e:	f000 f805 	bl	800085c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <HAL_InitTick+0x68>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d022      	beq.n	80008c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_InitTick+0x6c>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_InitTick+0x68>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000888:	fbb1 f3f3 	udiv	r3, r1, r3
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f916 	bl	8000ac2 <HAL_SYSTICK_Config>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10f      	bne.n	80008bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d809      	bhi.n	80008b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	f000 f8ee 	bl	8000a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_InitTick+0x70>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e004      	b.n	80008c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e001      	b.n	80008c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000004 	.word	0x20000004

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x1c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <HAL_IncTick+0x20>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_IncTick+0x1c>)
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000028 	.word	0x20000028
 80008fc:	20000008 	.word	0x20000008

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <HAL_GetTick+0x10>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	20000028 	.word	0x20000028

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	; (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	; (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff90 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff49 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff5e 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff90 	bl	80009cc <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5f 	bl	8000978 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffb0 	bl	8000a30 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d121      	bne.n	8000b30 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d10d      	bne.n	8000b14 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_FLASH_Unlock+0x64>)
 8000afc:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_FLASH_Unlock+0x68>)
 8000b02:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d101      	bne.n	8000b14 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e00e      	b.n	8000b32 <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_FLASH_Unlock+0x6c>)
 8000b18:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_FLASH_Unlock+0x70>)
 8000b1e:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_FLASH_Unlock+0x60>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d101      	bne.n	8000b30 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023c00 	.word	0x40023c00
 8000b40:	89abcdef 	.word	0x89abcdef
 8000b44:	02030405 	.word	0x02030405
 8000b48:	8c9daebf 	.word	0x8c9daebf
 8000b4c:	13141516 	.word	0x13141516

08000b50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_FLASH_Lock+0x1c>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_FLASH_Lock+0x1c>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000b80:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8000b84:	6053      	str	r3, [r2, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a3a      	ldr	r2, [pc, #232]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000b92:	f7ff feb5 	bl	8000900 <HAL_GetTick>
 8000b96:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000b98:	e008      	b.n	8000bac <HAL_RCC_DeInit+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b9a:	f7ff feb1 	bl	8000900 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_DeInit+0x3c>
    {
      return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e05e      	b.n	8000c6a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f0      	beq.n	8000b9a <HAL_RCC_DeInit+0x2a>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000bbe:	f023 0303 	bic.w	r3, r3, #3
 8000bc2:	6093      	str	r3, [r2, #8]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8000bc4:	e00a      	b.n	8000bdc <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc6:	f7ff fe9b 	bl	8000900 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e046      	b.n	8000c6a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ee      	bne.n	8000bc6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_RCC_DeInit+0x108>)
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <HAL_RCC_DeInit+0x10c>)
 8000bec:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HAL_RCC_DeInit+0x110>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe38 	bl	8000868 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 8000bfc:	78fb      	ldrb	r3, [r7, #3]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_RCC_DeInit+0x96>
  {
    return status;
 8000c02:	78fb      	ldrb	r3, [r7, #3]
 8000c04:	e031      	b.n	8000c6a <HAL_RCC_DeInit+0xfa>
  }

  /* Reset HSION, HSEON, CSSON & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1a      	ldr	r2, [pc, #104]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c0c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000c10:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000c14:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000c22:	f7ff fe6d 	bl	8000900 <HAL_GetTick>
 8000c26:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c28:	e008      	b.n	8000c3c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c2a:	f7ff fe69 	bl	8000900 <HAL_GetTick>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d901      	bls.n	8000c3c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e016      	b.n	8000c6a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1f0      	bne.n	8000c2a <HAL_RCC_DeInit+0xba>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
#if defined(RCC_LSECSS_SUPPORT)
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_LSECSSC | RCC_CIR_CSSC);
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c56:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000c5a:	60da      	str	r2, [r3, #12]
#else
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_CSSC);
#endif

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_RCC_DeInit+0x104>)
 8000c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c66:	6353      	str	r3, [r2, #52]	; 0x34

  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	001fff68 	.word	0x001fff68
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e31d      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c96:	4b94      	ldr	r3, [pc, #592]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ca0:	4b91      	ldr	r3, [pc, #580]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d07b      	beq.n	8000dae <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d006      	beq.n	8000cca <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x5e>
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cca:	4b87      	ldr	r3, [pc, #540]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d06a      	beq.n	8000dac <HAL_RCC_OscConfig+0x128>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d166      	bne.n	8000dac <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e2f7      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d106      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x74>
 8000cea:	4b7f      	ldr	r3, [pc, #508]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a7e      	ldr	r2, [pc, #504]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e02d      	b.n	8000d54 <HAL_RCC_OscConfig+0xd0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10c      	bne.n	8000d1a <HAL_RCC_OscConfig+0x96>
 8000d00:	4b79      	ldr	r3, [pc, #484]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a78      	ldr	r2, [pc, #480]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b76      	ldr	r3, [pc, #472]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a75      	ldr	r2, [pc, #468]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e01c      	b.n	8000d54 <HAL_RCC_OscConfig+0xd0>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0xb8>
 8000d22:	4b71      	ldr	r3, [pc, #452]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a70      	ldr	r2, [pc, #448]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b6e      	ldr	r3, [pc, #440]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a6d      	ldr	r2, [pc, #436]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e00b      	b.n	8000d54 <HAL_RCC_OscConfig+0xd0>
 8000d3c:	4b6a      	ldr	r3, [pc, #424]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a69      	ldr	r2, [pc, #420]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b67      	ldr	r3, [pc, #412]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a66      	ldr	r2, [pc, #408]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fdd0 	bl	8000900 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fdcc 	bl	8000900 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e2ad      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d76:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0xe0>
 8000d82:	e014      	b.n	8000dae <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fdbc 	bl	8000900 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fdb8 	bl	8000900 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e299      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d9e:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x108>
 8000daa:	e000      	b.n	8000dae <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d05a      	beq.n	8000e70 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d005      	beq.n	8000dcc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	d119      	bne.n	8000dfa <HAL_RCC_OscConfig+0x176>
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d116      	bne.n	8000dfa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dcc:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <HAL_RCC_OscConfig+0x160>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d001      	beq.n	8000de4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e276      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	493d      	ldr	r1, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df8:	e03a      	b.n	8000e70 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d020      	beq.n	8000e44 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e02:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <HAL_RCC_OscConfig+0x268>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fd7a 	bl	8000900 <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fd76 	bl	8000900 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e257      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f0      	beq.n	8000e10 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	492a      	ldr	r1, [pc, #168]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	604b      	str	r3, [r1, #4]
 8000e42:	e015      	b.n	8000e70 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e44:	4b29      	ldr	r3, [pc, #164]	; (8000eec <HAL_RCC_OscConfig+0x268>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4a:	f7ff fd59 	bl	8000900 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e52:	f7ff fd55 	bl	8000900 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e236      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f0      	bne.n	8000e52 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80b8 	beq.w	8000fee <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d170      	bne.n	8000f66 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_RCC_OscConfig+0x218>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e21a      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a1a      	ldr	r2, [r3, #32]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d921      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fbf1 	bl	8001698 <RCC_SetFlashLatencyFromMSIRange>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e208      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	061b      	lsls	r3, r3, #24
 8000ee0:	4901      	ldr	r1, [pc, #4]	; (8000ee8 <HAL_RCC_OscConfig+0x264>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	604b      	str	r3, [r1, #4]
 8000ee6:	e020      	b.n	8000f2a <HAL_RCC_OscConfig+0x2a6>
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef0:	4ba4      	ldr	r3, [pc, #656]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	49a1      	ldr	r1, [pc, #644]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f02:	4ba0      	ldr	r3, [pc, #640]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	061b      	lsls	r3, r3, #24
 8000f10:	499c      	ldr	r1, [pc, #624]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fbbc 	bl	8001698 <RCC_SetFlashLatencyFromMSIRange>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e1d3      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	0b5b      	lsrs	r3, r3, #13
 8000f30:	3301      	adds	r3, #1
 8000f32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f3a:	4a92      	ldr	r2, [pc, #584]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000f3c:	6892      	ldr	r2, [r2, #8]
 8000f3e:	0912      	lsrs	r2, r2, #4
 8000f40:	f002 020f 	and.w	r2, r2, #15
 8000f44:	4990      	ldr	r1, [pc, #576]	; (8001188 <HAL_RCC_OscConfig+0x504>)
 8000f46:	5c8a      	ldrb	r2, [r1, r2]
 8000f48:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f4a:	4a90      	ldr	r2, [pc, #576]	; (800118c <HAL_RCC_OscConfig+0x508>)
 8000f4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f4e:	4b90      	ldr	r3, [pc, #576]	; (8001190 <HAL_RCC_OscConfig+0x50c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc88 	bl	8000868 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d045      	beq.n	8000fee <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	e1b5      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d029      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <HAL_RCC_OscConfig+0x510>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcc4 	bl	8000900 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fcc0 	bl	8000900 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1a1      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f8e:	4b7d      	ldr	r3, [pc, #500]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9a:	4b7a      	ldr	r3, [pc, #488]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4977      	ldr	r1, [pc, #476]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fac:	4b75      	ldr	r3, [pc, #468]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	4972      	ldr	r1, [pc, #456]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
 8000fc0:	e015      	b.n	8000fee <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fc2:	4b74      	ldr	r3, [pc, #464]	; (8001194 <HAL_RCC_OscConfig+0x510>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc9a 	bl	8000900 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fc96 	bl	8000900 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e177      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fe2:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d030      	beq.n	800105c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d016      	beq.n	8001030 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001002:	4b65      	ldr	r3, [pc, #404]	; (8001198 <HAL_RCC_OscConfig+0x514>)
 8001004:	2201      	movs	r2, #1
 8001006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fc7a 	bl	8000900 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fc76 	bl	8000900 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e157      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001022:	4b58      	ldr	r3, [pc, #352]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0x38c>
 800102e:	e015      	b.n	800105c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001030:	4b59      	ldr	r3, [pc, #356]	; (8001198 <HAL_RCC_OscConfig+0x514>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fc63 	bl	8000900 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103e:	f7ff fc5f 	bl	8000900 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e140      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	f000 80b5 	beq.w	80011d4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106e:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10d      	bne.n	8001096 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b42      	ldr	r3, [pc, #264]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6253      	str	r3, [r2, #36]	; 0x24
 8001086:	4b3f      	ldr	r3, [pc, #252]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001092:	2301      	movs	r3, #1
 8001094:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001096:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_RCC_OscConfig+0x518>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d118      	bne.n	80010d4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <HAL_RCC_OscConfig+0x518>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a3d      	ldr	r2, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x518>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fc27 	bl	8000900 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010b6:	f7ff fc23 	bl	8000900 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b64      	cmp	r3, #100	; 0x64
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e104      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c8:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_RCC_OscConfig+0x518>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x466>
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 80010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e0:	4a28      	ldr	r2, [pc, #160]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6353      	str	r3, [r2, #52]	; 0x34
 80010e8:	e02d      	b.n	8001146 <HAL_RCC_OscConfig+0x4c2>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x488>
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	4a23      	ldr	r2, [pc, #140]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 80010f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fc:	6353      	str	r3, [r2, #52]	; 0x34
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001108:	6353      	str	r3, [r2, #52]	; 0x34
 800110a:	e01c      	b.n	8001146 <HAL_RCC_OscConfig+0x4c2>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b05      	cmp	r3, #5
 8001112:	d10c      	bne.n	800112e <HAL_RCC_OscConfig+0x4aa>
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6353      	str	r3, [r2, #52]	; 0x34
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6353      	str	r3, [r2, #52]	; 0x34
 800112c:	e00b      	b.n	8001146 <HAL_RCC_OscConfig+0x4c2>
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001138:	6353      	str	r3, [r2, #52]	; 0x34
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 8001140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d015      	beq.n	800117a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fbd7 	bl	8000900 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fbd3 	bl	8000900 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	f241 3288 	movw	r2, #5000	; 0x1388
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e0b2      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_RCC_OscConfig+0x500>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ee      	beq.n	8001156 <HAL_RCC_OscConfig+0x4d2>
 8001178:	e023      	b.n	80011c2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117a:	f7ff fbc1 	bl	8000900 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001180:	e019      	b.n	80011b6 <HAL_RCC_OscConfig+0x532>
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	080017d4 	.word	0x080017d4
 800118c:	20000000 	.word	0x20000000
 8001190:	20000004 	.word	0x20000004
 8001194:	42470020 	.word	0x42470020
 8001198:	42470680 	.word	0x42470680
 800119c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a0:	f7ff fbae 	bl	8000900 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e08d      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 80011b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1ee      	bne.n	80011a0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d105      	bne.n	80011d4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c8:	4b44      	ldr	r3, [pc, #272]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 80011ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011cc:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 80011ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d079      	beq.n	80012d0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	d056      	beq.n	8001290 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d13b      	bne.n	8001262 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_RCC_OscConfig+0x65c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb86 	bl	8000900 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fb82 	bl	8000900 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e063      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001226:	4319      	orrs	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	430b      	orrs	r3, r1
 800122e:	492b      	ldr	r1, [pc, #172]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x65c>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fb61 	bl	8000900 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001242:	f7ff fb5d 	bl	8000900 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e03e      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x5be>
 8001260:	e036      	b.n	80012d0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_RCC_OscConfig+0x65c>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fb4a 	bl	8000900 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fb46 	bl	8000900 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e027      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x5ec>
 800128e:	e01f      	b.n	80012d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e01a      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_RCC_OscConfig+0x658>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10d      	bne.n	80012cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d106      	bne.n	80012cc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470060 	.word	0x42470060

080012e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e11a      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b8f      	ldr	r3, [pc, #572]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d919      	bls.n	800133a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_ClockConfig+0x34>
 800130c:	4b8a      	ldr	r3, [pc, #552]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a89      	ldr	r2, [pc, #548]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b87      	ldr	r3, [pc, #540]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 0201 	bic.w	r2, r3, #1
 8001320:	4985      	ldr	r1, [pc, #532]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001328:	4b83      	ldr	r3, [pc, #524]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d001      	beq.n	800133a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0f9      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001346:	4b7d      	ldr	r3, [pc, #500]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	497a      	ldr	r1, [pc, #488]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 808e 	beq.w	8001482 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d121      	bne.n	80013be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0d7      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001386:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0cb      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0bf      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0b7      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f023 0203 	bic.w	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	495c      	ldr	r1, [pc, #368]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fa96 	bl	8000900 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d112      	bne.n	8001404 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e0:	f7ff fa8e 	bl	8000900 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e09b      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f6:	4b51      	ldr	r3, [pc, #324]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d1ee      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xfc>
 8001402:	e03e      	b.n	8001482 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d112      	bne.n	8001432 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140e:	f7ff fa77 	bl	8000900 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e084      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001424:	4b45      	ldr	r3, [pc, #276]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d1ee      	bne.n	800140e <HAL_RCC_ClockConfig+0x12a>
 8001430:	e027      	b.n	8001482 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d11d      	bne.n	8001476 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143c:	f7ff fa60 	bl	8000900 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e06d      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d1ee      	bne.n	800143c <HAL_RCC_ClockConfig+0x158>
 800145e:	e010      	b.n	8001482 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001460:	f7ff fa4e 	bl	8000900 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e05b      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1ee      	bne.n	8001460 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d219      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d105      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x1be>
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a27      	ldr	r2, [pc, #156]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0201 	bic.w	r2, r3, #1
 80014aa:	4923      	ldr	r1, [pc, #140]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_RCC_ClockConfig+0x254>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e034      	b.n	800152e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4917      	ldr	r1, [pc, #92]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490f      	ldr	r1, [pc, #60]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f823 	bl	800154c <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCC_ClockConfig+0x258>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490b      	ldr	r1, [pc, #44]	; (8001540 <HAL_RCC_ClockConfig+0x25c>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_RCC_ClockConfig+0x260>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x264>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f9a0 	bl	8000868 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	72fb      	strb	r3, [r7, #11]

  return status;
 800152c:	7afb      	ldrb	r3, [r7, #11]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	40023800 	.word	0x40023800
 8001540:	080017d4 	.word	0x080017d4
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d00c      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x30>
 8001562:	2b0c      	cmp	r3, #12
 8001564:	d87c      	bhi.n	8001660 <HAL_RCC_GetSysClockFreq+0x114>
 8001566:	2b04      	cmp	r3, #4
 8001568:	d002      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x24>
 800156a:	2b08      	cmp	r3, #8
 800156c:	d003      	beq.n	8001576 <HAL_RCC_GetSysClockFreq+0x2a>
 800156e:	e077      	b.n	8001660 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_GetSysClockFreq+0x140>)
 8001572:	613b      	str	r3, [r7, #16]
      break;
 8001574:	e082      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_RCC_GetSysClockFreq+0x144>)
 8001578:	613b      	str	r3, [r7, #16]
      break;
 800157a:	e07f      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <HAL_RCC_GetSysClockFreq+0x148>)
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	0d9b      	lsrs	r3, r3, #22
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	3301      	adds	r3, #1
 8001594:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001596:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01a      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	4939      	ldr	r1, [pc, #228]	; (8001690 <HAL_RCC_GetSysClockFreq+0x144>)
 80015ac:	fb01 f003 	mul.w	r0, r1, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	fb01 f102 	mul.w	r1, r1, r2
 80015b6:	1844      	adds	r4, r0, r1
 80015b8:	4935      	ldr	r1, [pc, #212]	; (8001690 <HAL_RCC_GetSysClockFreq+0x144>)
 80015ba:	fba2 0101 	umull	r0, r1, r2, r1
 80015be:	1863      	adds	r3, r4, r1
 80015c0:	4619      	mov	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	461a      	mov	r2, r3
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	f7fe fdd7 	bl	800017c <__aeabi_uldivmod>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4613      	mov	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e040      	b.n	800165a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	461c      	mov	r4, r3
 80015dc:	f04f 0500 	mov.w	r5, #0
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	014b      	lsls	r3, r1, #5
 80015ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015f2:	0142      	lsls	r2, r0, #5
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	1b00      	subs	r0, r0, r4
 80015fa:	eb61 0105 	sbc.w	r1, r1, r5
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	018b      	lsls	r3, r1, #6
 8001608:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800160c:	0182      	lsls	r2, r0, #6
 800160e:	1a12      	subs	r2, r2, r0
 8001610:	eb63 0301 	sbc.w	r3, r3, r1
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	00d9      	lsls	r1, r3, #3
 800161e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001622:	00d0      	lsls	r0, r2, #3
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	1912      	adds	r2, r2, r4
 800162a:	eb45 0303 	adc.w	r3, r5, r3
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	0299      	lsls	r1, r3, #10
 8001638:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800163c:	0290      	lsls	r0, r2, #10
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	461a      	mov	r2, r3
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	f7fe fd95 	bl	800017c <__aeabi_uldivmod>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4613      	mov	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e00d      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	0b5b      	lsrs	r3, r3, #13
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	613b      	str	r3, [r7, #16]
      break;
 800167a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167c:	693b      	ldr	r3, [r7, #16]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	016e3600 	.word	0x016e3600
 8001694:	080017c8 	.word	0x080017c8

08001698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d12c      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e016      	b.n	80016f6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6253      	str	r3, [r2, #36]	; 0x24
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016e8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80016fc:	d105      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x72>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001704:	d101      	bne.n	800170a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001706:	2301      	movs	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 0201 	bic.w	r2, r3, #1
 8001724:	490b      	ldr	r1, [pc, #44]	; (8001754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000
 8001754:	40023c00 	.word	0x40023c00

08001758 <__libc_init_array>:
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	2600      	movs	r6, #0
 800175c:	4d0c      	ldr	r5, [pc, #48]	; (8001790 <__libc_init_array+0x38>)
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__libc_init_array+0x3c>)
 8001760:	1b64      	subs	r4, r4, r5
 8001762:	10a4      	asrs	r4, r4, #2
 8001764:	42a6      	cmp	r6, r4
 8001766:	d109      	bne.n	800177c <__libc_init_array+0x24>
 8001768:	f000 f822 	bl	80017b0 <_init>
 800176c:	2600      	movs	r6, #0
 800176e:	4d0a      	ldr	r5, [pc, #40]	; (8001798 <__libc_init_array+0x40>)
 8001770:	4c0a      	ldr	r4, [pc, #40]	; (800179c <__libc_init_array+0x44>)
 8001772:	1b64      	subs	r4, r4, r5
 8001774:	10a4      	asrs	r4, r4, #2
 8001776:	42a6      	cmp	r6, r4
 8001778:	d105      	bne.n	8001786 <__libc_init_array+0x2e>
 800177a:	bd70      	pop	{r4, r5, r6, pc}
 800177c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001780:	4798      	blx	r3
 8001782:	3601      	adds	r6, #1
 8001784:	e7ee      	b.n	8001764 <__libc_init_array+0xc>
 8001786:	f855 3b04 	ldr.w	r3, [r5], #4
 800178a:	4798      	blx	r3
 800178c:	3601      	adds	r6, #1
 800178e:	e7f2      	b.n	8001776 <__libc_init_array+0x1e>
 8001790:	080017ec 	.word	0x080017ec
 8001794:	080017ec 	.word	0x080017ec
 8001798:	080017ec 	.word	0x080017ec
 800179c:	080017f0 	.word	0x080017f0

080017a0 <memset>:
 80017a0:	4603      	mov	r3, r0
 80017a2:	4402      	add	r2, r0
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d100      	bne.n	80017aa <memset+0xa>
 80017a8:	4770      	bx	lr
 80017aa:	f803 1b01 	strb.w	r1, [r3], #1
 80017ae:	e7f9      	b.n	80017a4 <memset+0x4>

080017b0 <_init>:
 80017b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b2:	bf00      	nop
 80017b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	469e      	mov	lr, r3
 80017ba:	4770      	bx	lr

080017bc <_fini>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr
